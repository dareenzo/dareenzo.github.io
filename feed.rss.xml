<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paulo Phagula</title>
    <description>Paulo Phagula's Blog on Software Development and related topics
</description>
    <link>https://dareenzo.github.io/</link>
    <pubDate>Sat, 05 May 2018 12:13:57 +0200</pubDate>
    <lastBuildDate>Sat, 05 May 2018 12:13:57 +0200</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>A few MySQL subtleties and how to go about them</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MySQL is the most widely used database in the world. It is in the LAMP stack
commonly used by Web Developers and supports many software bundles like
WordPress and Drupal which in turn support most of the sites in the internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its users range from the one-man-band-man hard-core developers writing
code in their basements, to the super-mega enterprises like Facebook,
Github, Google, and Wikipedia just to name a few.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Almost everyone uses it&amp;#8201;&amp;#8212;&amp;#8201;that&amp;#8217;s what I want to say)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, despite its very large user base, there are still some misconceptions/subtleties
about how to use it and properly setup, that usually go unnoticed until its too
late, or that are initially unusual/unexpected by people (like me) used to other
database products. At large, this is due to ignorance on developers
(which commonly have to act as DBAs), but mostly to MySQL itself which acts in
a very uncommon way&amp;#8201;&amp;#8212;&amp;#8201;read insecure, non-ANSI compliant, shit-show like style&amp;#8201;&amp;#8212;&amp;#8201;by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that it&amp;#8217;s so easy to setup and use, allows almost anyone,
beginner or not, to just fire it and rock on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is not a rant about MySQL nor a promotion of &lt;code&gt;&amp;lt;insert-your-favorite-db-here&amp;gt;&lt;/code&gt;&amp;#8201;&amp;#8212;&amp;#8201;I&amp;#8217;ll do my best to control my emotions, I promise!. Its about sharing details
on a set of subtleties I found in my experience (coming from SQL Server and Oracle),
and how you can go about them so you&amp;#8217;re not caught off guard as I was.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;division-by-zero-equals-null&quot;&gt;Division by zero equals NULL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we go&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT 1/0;
+------+
| 1/0  |
+------+
| NULL |
+------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OMG. Imagine that is somewhere deep in the middle of your code. Incorrect
reports, incorrect business decisions taken, kittens dying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How could you avoid this? Set your MySQL mode to &lt;code&gt;ERROR_FOR_DIVISION_BY_ZERO&lt;/code&gt;
and &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;. Now, whenever you do that an error will be produced
instead. Let&amp;#8217;s try it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SET SESSION sql_mode = 'ERROR_FOR_DIVISION_BY_ZERO,STRICT_ALL_TABLES';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; SELECT @@sql_mode;
+----------------------------------------------+
| @@sql_mode                                   |
+----------------------------------------------+
| STRICT_ALL_TABLES,ERROR_FOR_DIVISION_BY_ZERO |
+----------------------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; SELECT 1/0;
+------+
| 1/0  |
+------+
| NULL |
+------+
1 row in set, 1 warning (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What? WTF man, that&amp;#8217;s just a warning, I expected an error!&quot; You say.
I hear you. Let&amp;#8217;s look at this warning&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; show warnings;
+---------+------+---------------+
| Level   | Code | Message       |
+---------+------+---------------+
| Warning | 1365 | Division by 0 |
+---------+------+---------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hm, it seems like the SQL mode just produces warnings, but let&amp;#8217;s try it with a
table&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; CREATE TABLE test(value int);
Query OK, 0 rows affected (0.04 sec)

mysql&amp;gt; INSERT INTO test(value) VALUES(1/0);
ERROR 1365 (22012): Division by 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems SQL mode won&amp;#8217;t cut it all times. Simple &lt;code&gt;SELECT&lt;/code&gt; statements will not be
fully covered for these kinds of errors, only your table data (what you &lt;code&gt;INSERT&lt;/code&gt;
and &lt;code&gt;UPDATE&lt;/code&gt;) will.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s confirm this by looking at another example with &lt;code&gt;SELECT&lt;/code&gt; s and table data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT count(*)/0 FROM test;
+------------+
| count(*)/0 |
+------------+
|       NULL |
+------------+
1 row in set, 1 warning (0.01 sec)

mysql&amp;gt; SELECT value/0 FROM test WHERE value=1;
+---------+
| value/0 |
+---------+
|    NULL |
+---------+
1 row in set, 1 warning (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it indeed, for &lt;code&gt;SELECT&lt;/code&gt; s all we get is a warning, but at least we&amp;#8217;re covered
from data corruption. It is not perfect but should help a bit, also if your
database interface allows, you can tell it to convert the warnings into errors
in which case you would get &quot;full protection&quot;. In the absence of that feature a
technique that I&amp;#8217;ve seen some people use is to try to cover for the zero case by
using &lt;code&gt;IF&lt;/code&gt; s or &lt;code&gt;NULLIF&lt;/code&gt; s, more or less like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT 1/nullif(some_column, 0); -- returns null
-- OR
SELECT 1/if(some_column = 0, 1, some_column); -- returns 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not like this technique as I have to remember to do that, plus it makes the
query ugly. But since practicality speak lauder than my tastes, ultimately, I have
to go with the less worse solution, which in this case seems to be the last one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
this is just an example, and setting the SQL mode for the session suffices,
but in a real world scenario you should set your SQL mode on the server&amp;#8217;s
configuration file, so it affects every single connection and the settings can
persist after reboots.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;0&quot;&gt;'' = 0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT ''=0;
+------+
| ''=0 |
+------+
|    1 |
+------+
1 row in set (0.01 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could be said that this is not a problem since many programming languages do
this. But the thing is that SQL is not a programming language (each database vendor
adds their own procedural extensions to SQL to make it be more like a programming
language and cater for the &quot;limitations&quot; of pure SQL) and furthermore my expectations
about how things should work in the database are completely different from how
they should work in a programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyhow, the kicker is that the behavior is inconsistent when compared with most
programming languages, particularly when the operands for the equality operator
are numbers and strings. See the following sample&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT 'password'=0;
+--------------+
| 'password'=0 |
+--------------+
|            1 |
+--------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two values of different data types, one falsy and another truthy are being compared
somehow and are considered equal. I&amp;#8217;d get it if we were comparing a string of
numbers like &lt;code&gt;'1'&lt;/code&gt; with a number like &lt;code&gt;1&lt;/code&gt;, but this&amp;#8230;&amp;#8203; this is weird.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, I no longer remember exactly what was the case, but I&amp;#8217;ve had a
situation in the past where this caused me to waste hours to figure out.
All I recall is there was a simple mistake of swapping the values for the fields
in the &lt;code&gt;WHERE&lt;/code&gt; clause, which caused the query to produce correct results sometimes
but fail unpredictably at others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the way around this? Being careful and minding warnings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;zeros-in-dates-and-timestamps-0000-00-00-00-00-00&quot;&gt;Zeros in dates and timestamps '0000-00-00 00:00:00'&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is another weird thing about MySQL, it allows for invalid dates containing
zeroes. There are claims for legitimate good cases for having this &quot;feature&quot;,
but perhaps I haven&amp;#8217;t lived long enough to see one just yet. Regardless, the
situation is the one bellow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; CREATE TABLE test (birth_day date, created_at datetime);
Query OK, 0 rows affected (0.02 sec)

mysql&amp;gt; INSERT INTO test VALUES('0000-00-00', '0000-00-00 00:00:00');
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; INSERT INTO test VALUES('2000-10-00', '0000-00-00 19:30:00');
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; SELECT * FROM test;
+------------+---------------------+
| birth_day  | created_at          |
+------------+---------------------+
| 0000-00-00 | 0000-00-00 00:00:00 |
| 2000-10-00 | 0000-00-00 19:30:00 |
+------------+---------------------+
2 rows in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose you&amp;#8217;re called in to analyze this data. How would you interpret it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This seems like a bad usage of the typing system. If we&amp;#8217;re going to represent
missing data why not simply use &lt;code&gt;NULL&lt;/code&gt;, since that is precisely what it is for?!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the same token, its contradictory to mandate that a field be &lt;code&gt;NOT NULL&lt;/code&gt;, but
then go and keep invalid values on it. We would be respecting the constraint but
at the expense of littering data with insignificant and hard (if at all) interpretable
values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I remember working on an HR system where zeroes where allowed in the dates.
Whenever a date was missing, &lt;code&gt;0000-00-00&lt;/code&gt; was used instead, and as a result queries
for computing the candidates experience would bring inconsistent results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to avoid this? Set SQL mode to include &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;, &lt;code&gt;NO_ZERO_DATE&lt;/code&gt;
and &lt;code&gt;NO_ZERO_IN_DATE&lt;/code&gt;, so that it complains appropriately upon the presence of
incorrect date values. Let&amp;#8217;s try it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SET SESSION sql_mode = 'NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; INSERT INTO test VALUES('2000-10-00', '0000-00-00 19:30:00');
ERROR 1292 (22007): Incorrect date value: '2000-10-00' for column 'birth_day' at row 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must combine all these 3 sql modes. Without strict mode MySQL will still
behave incorrectly and raising warning but ultimately no protection is provided.
See bellow:
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SET SESSION sql_mode = 'NO_ZERO_DATE,NO_ZERO_IN_DATE';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; INSERT INTO test VALUES('2000-10-00', '0000-00-00 19:30:00');
Query OK, 1 row affected, 2 warnings (0.00 sec)

mysql&amp;gt; SELECT * FROM test;
+------------+---------------------+
| birth_day  | created_at          |
+------------+---------------------+
| 0000-00-00 | 0000-00-00 00:00:00 |
+------------+---------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note how not only it &quot;simply&quot; raised warnings, but it also replaced our values
with zeros, which is much worse than what we had to begin with.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;code-timestamp-code-vs-code-datetime-code&quot;&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt; vs. &lt;code&gt;DATETIME&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some people unknowingly use these data types as if they were synonymous, but in
reality they&amp;#8217;re different and appropriate for different usage scenarios. The
sample bellow should clarify what I mean:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SET SESSION time_zone='+2:00';

CREATE TABLE dates (
    date_timestamp timestamp,
    date_datetime datetime
)

-- Inserting the exact same value to both columns
INSERT INTO dates (date_timestamp, date_datetime) VALUES ('2017-07-09 20:11:00', '2017-07-09 20:11:00');

mysql&amp;gt; SELECT * FROM dates;
+---------------------+---------------------+
| date_timestamp      | date_datetime       |
+---------------------+---------------------+
| 2017-07-09 20:11:00 | 2017-07-09 20:11:00 |
+---------------------+---------------------+
1 row in set (0.00 sec)

SET SESSION time_zone='+4:00';

mysql&amp;gt; SELECT * FROM dates;
+---------------------+---------------------+
| date_timestamp      | date_datetime       |
+---------------------+---------------------+
| 2017-07-09 22:11:00 | 2017-07-09 20:11:00 |
+---------------------+---------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MySQL converts &lt;code&gt;TIMESTAMP&lt;/code&gt; values from the current time zone to UTC for storage,
and back from UTC to the current time zone for retrieval. (This does not occur
for other types such as &lt;code&gt;DATETIME&lt;/code&gt;.) By default, the current time zone for each
connection is the server&amp;#8217;s time. The time zone can be set on a per-connection basis.
As long as the time zone setting remains constant, you get back the same value
you store. If you store a &lt;code&gt;TIMESTAMP&lt;/code&gt; value, and then change the time zone and
retrieve the value, the retrieved value is different from the value you stored.
This occurs because the same time zone was not used for conversion in both directions.
The current time zone is available as the value of the &lt;code&gt;time_zone&lt;/code&gt; system variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which one to use? It depends on your situation and needs. Let that guide your
choices and you should be fine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;utf8-is-not-utf8-aka-can-you-insert&quot;&gt;UTF8 is not UTF8 aka Can you INSERT 💩?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is serious, can you &lt;code&gt;INSERT&lt;/code&gt; 💩 in your table? &amp;#8230;&amp;#8203;No?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why not? It&amp;#8217;s UTF-8 right? I saw you doing the &lt;code&gt;CHARSET&lt;/code&gt; thing when you created
your table&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be fair, encodings, unicode, character sets and collations make my head
hurt and I&amp;#8217;m not a smart guy so I&amp;#8217;ll just give you the bottom line and
refer to a place where you can know more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bottom line is: if you created a table with &lt;code&gt;CHARSET uft8&lt;/code&gt; then it won&amp;#8217;t work
with 💩, that is, you&amp;#8217;re not supporting all characters in unicode, and so
people cannot leave emojis on comments, or write asian kanjis or characters,
on your site/app. This is because UTF8 (the real one) is &lt;code&gt;utf8mb4&lt;/code&gt;, not
&lt;code&gt;utf8&lt;/code&gt; as is said in many places on the internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do the test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;-- Lets try uft8

CREATE DATABASE test;

USE test;

CREATE TABLE poo_utf8 (
    contents varchar(191)
) CHARSET=utf8 COLLATE=utf8_unicode_ci;

INSERT INTO poo_utf8(contents) VALUES ('big ol pile of 💩');
Query OK, 1 row affected, 1 warning (0.01 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh, lovely&amp;#8230;&amp;#8203; let&amp;#8217;s query it then&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT * FROM poo_utf8;
+------------------+
| contents         |
+------------------+
| big ol pile of ? |
+------------------+
1 row in set (0.01 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What the 💩? Where is my &lt;strong&gt;*&lt;/strong&gt; 💩? Where did it go?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Told you&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;-- Now let's try utf8mb4
CREATE TABLE poo_utf8mb4 (
    contents varchar(191)
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO poo_utf8mb4(contents) VALUES ('big ol pile of 💩');

SELECT * FROM poo_utf8mb4;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT * FROM poo_utf8mb4;
+---------------------+
| contents            |
+---------------------+
| big ol pile of 💩     |
+---------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(sigh) There&amp;#8217;s my lovely 💩.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t let anyone take your 💩. Use &lt;code&gt;utf8mb4&lt;/code&gt; and &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course 💩 was just an example. If you want to support any character
you need to use &quot;proper&quot; UTF8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BTW on MySQL 8 this is going to be the default, but we all know everyone must do
ceremonies and rituals prior to migrating, so&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To know the exact details of why this is so check out &lt;a href=&quot;https://mathiasbynens.be/notes/mysql-utf8mb4&quot; class=&quot;bare&quot;&gt;https://mathiasbynens.be/notes/mysql-utf8mb4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-code-check-code-constraint-is-only-parsed-but-ignored-in-the-end&quot;&gt;The &lt;code&gt;CHECK&lt;/code&gt; constraint is only parsed but ignored in the end&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been in MySQL since forever and not even MySQL 8 will fix it. MySQL parses
the &lt;code&gt;CHECK&lt;/code&gt; constraints when defining tables but it doesn&amp;#8217;t enforce them. They&amp;#8217;re
just there but do nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example bellow depicts the behavior. On it we imagine defining a &lt;code&gt;people&lt;/code&gt;
table. Its just supposed to keep the id, name and gender of for each person. In
order to save a bit of space we want to constrain the value that can go in gender
to &lt;code&gt;m&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt;, standing for male and female. We use the &lt;code&gt;CHECK&lt;/code&gt; constraint for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE TABLE people (
  id INT NOT NULL PRIMARY KEY auto_increment,
  name varchar(100),
  gender char(1) CHECK (gender IN ('m', 'f'))
);

mysql&amp;gt; INSERT INTO people (NAME, gender) VALUE ('Paulo', 'h');
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; SELECT * FROM people;
+----+-------+--------+
| id | name  | gender |
+----+-------+--------+
|  1 | Paulo | h      |
+----+-------+--------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you saw all went well, except MySQL didn&amp;#8217;t cry when I said my gender was &lt;code&gt;h&lt;/code&gt;
--for human.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to go about this? Know that &lt;code&gt;CHECK&lt;/code&gt; constraints in MySQL are just for show.
You&amp;#8217;ll need to find another way instead, perhaps triggers or some code in your
application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aggregations-without-code-group-by-code&quot;&gt;Aggregations without &lt;code&gt;GROUP BY&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem with allowing this kind of stuff is with the results provided.
Let&amp;#8217;s suppose we have some table to keep records of candidates, those candidates
for something&amp;#8230;&amp;#8203; say vacancies. The candidates can go change through various stages
from registered to hopefully (selected).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine I want to get the total of candidates per each category. I could
(mistakenly) go with a query like &lt;code&gt;SELECT flow_status, count(*) FROM candidate&lt;/code&gt;,
missing the &lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; SELECT flow_status, count(*) FROM candidate;
+-------------+----------+
| flow_status | count(*) |
+-------------+----------+
| registered  |    10761 |
+-------------+----------+
1 row in set (0.01 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This result is very likely to be wrong. Given that I&amp;#8217;m using aggregate functions
without grouping I&amp;#8217;m going to get just one record back, with the count for all
the candidates but only one of &lt;code&gt;flow_status&lt;/code&gt; (the first in this case).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It could be said that this is a fault on whoever wrote the query, but I disagree
this query should not have been allowed to run in the first place. The parser
should&amp;#8217;ve rejected it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are legitimate cases for using aggregations without grouping, but only
aggregations should be allowed then. A basic example would be to know the
average height of the candidates and the count fo them. There&amp;#8217;s nothing wrong
with that. But as soon you an aggregations and non-aggregations without grouping
then it is very likely you have problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cure for this problem is the same as for the next point. So, just keep going.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non-grouped-by-nor-aggregated-columns-in-select&quot;&gt;Non-GROUPed-BY nor aggregated columns in SELECT&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is stopped by default starting from MySQL 5.7 as seen these reference
articles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, for those using versions or that do not their settings right, bellow
follows an example of what I mean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE TABLE invoice_line_items (
    id INT NOT NULL PRIMARY KEY auto_increment,
    invoice_id INT NOT NULL,
    description varchar(100)
);

INSERT INTO invoice_line_items VALUES
    (NULL, 1, 'New socks'),
    (NULL, 1, 'A hat'),
    (NULL, 2, 'Shoes'),
    (NULL, 2, 'T shirt'),
    (NULL, 3, 'Tie');

mysql&amp;gt; SELECT id, invoice_id, description FROM invoice_line_items GROUP BY invoice_id;
+----+------------+-------------+
| id | invoice_id | description |
+----+------------+-------------+
|  1 |          1 | New socks   |
|  3 |          2 | Shoes       |
|  5 |          3 | Tie         |
+----+------------+-------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because MySQL doesn&amp;#8217;t enforce the usage the correct behavior of &lt;code&gt;GROUP BY&lt;/code&gt; we can
easily return incorrect data by accident, such as above. Luckily this behavior
has been corrected by default since version 5.7 with the mode &lt;code&gt;ONLY_FULL_GROUP_BY&lt;/code&gt;.
Setting your SQL mode to include it sort things out for you you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;data-truncations&quot;&gt;Data Truncations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MySQL tends to do data truncations whenever a value doesn&amp;#8217;t fit a column. Like
in the other cases the sin is the silent warning. Let look at an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; CREATE TABLE foo (bar VARCHAR(4));
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; INSERT INTO foo (bar) VALUES (&quot;12345&quot;);
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql&amp;gt; SHOW WARNINGS;
+---------+------+------------------------------------------+
| Level   | Code | Message                                  |
+---------+------+------------------------------------------+
| Warning | 1265 | Data truncated for column 'bar' at row 1 |
+---------+------+------------------------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yap, your data was truncated, just like that! And this also happens on&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;ALTER TABLE foo MODIFY COLUMN bar VARCHAR(2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can make MySQL do the right thing by setting the SQL Mode option to
include &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; or &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;. The difference is that the
former will only enable it for transactional data storage engines. As much as
I&amp;#8217;m loathed to say it, I don&amp;#8217;t recommend using &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;, as an error
during updating a non-transactional table will result in a partial update, which
is probably worse than a truncated field. Setting the mode to &lt;code&gt;TRADITIONAL&lt;/code&gt;
includes both these and a couple of related ones
(&lt;code&gt;NO_ZERO_IN_DATE&lt;/code&gt;, &lt;code&gt;NO_ZERO_DATE&lt;/code&gt;, &lt;code&gt;ERROR_FOR_DIVISION_BY_ZERO&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mysql-uses-separate-encoding-for-different-parts&quot;&gt;MySQL uses separate encoding for different parts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In MySQL these components have different encodings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; \s
--------------
mysql  Ver 14.14 Distrib 5.7.15, for osx10.11 (x86_64) using  EditLine wrapper

Connection id:      6
Current database:   soma
Current user:       root@localhost
SSL:            Not in use
Current pager:      less
Using outfile:      ''
Using delimiter:    ;
Server version:     5.7.15 MySQL Community Server (GPL)
Protocol version:   10
Connection:     127.0.0.1 via TCP/IP
Server characterset:    utf8mb4
Db     characterset:    utf8
Client characterset:    utf8mb4
Conn.  characterset:    utf8mb4
TCP port:       3306
Uptime:         1 hour 32 min 20 sec

Threads: 5  Questions: 289  Slow queries: 0  Opens: 166  Flush tables: 1  Open tables: 159  Queries per second avg: 0.052
--------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt; CREATE TABLE `demo_encoding` (
  `username` varchar(20) CHARACTER SET latin1 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=greek&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s nothing with the above. In fact it is a feature and I&amp;#8217;ve had good
legitimate cases for having two different encodings in use for different parts.
It&amp;#8217;s more a good to know thing, as to improve your decisions on configuration,
and helping in managing your expectations upon the server&amp;#8217;s behavior regarding
this matter.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;booleans-are-synonymous-with-tiny-integers&quot;&gt;Booleans are synonymous with Tiny Integers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In MySQL Booleans are synonymous with tiny integers, actually to be precise
&lt;code&gt;BOOL&lt;/code&gt; s are aliases for &lt;code&gt;TINYINT&lt;/code&gt; s. Let&amp;#8217;s have a look at the sample code&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;mysql&amp;gt; CREATE TABLE things (is_fit BOOL);
Query OK, 0 rows affected (0.11 sec)

mysql&amp;gt; DESC things;
+--------+------------+------+-----+---------+-------+
| Field  | Type       | Null | Key | Default | Extra |
+--------+------------+------+-----+---------+-------+
| is_fit | tinyint(1) | YES  |     | NULL    |       |
+--------+------------+------+-----+---------+-------+
1 row in set (0.00 sec)

mysql&amp;gt; SHOW CREATE TABLE things;
+--------+---------------------------------------------------------------------------------------------------+
| Table  | Create Table                                                                                      |
+--------+---------------------------------------------------------------------------------------------------+
| things | CREATE TABLE `things` (
  `is_fit` tinyint(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 |
+--------+---------------------------------------------------------------------------------------------------+
1 row in set (0.01 sec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not terrible awful, but if the idea is to save some space why not just
use &lt;code&gt;BIT(1)&lt;/code&gt;? This would allow us to save space and is more strict, it only
allows &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;TINYINT(1)&lt;/code&gt; can allow from -128 and 127, and a funny guy can set the field
value to something else other than the expect &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bonus-varchar-255-obsession&quot;&gt;Bonus: VARCHAR(255) Obsession&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve seen this one over and over and over &amp;#8230;&amp;#8203; heck, done it myself &amp;#8230;&amp;#8203; anyway&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stop already with &lt;code&gt;VARCHAR(255)&lt;/code&gt; Obsession. The thing can go up to 65535.
Yap &lt;code&gt;VARCHAR(65535)&lt;/code&gt; FTW. Way better than the TEXT you use for most cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only &lt;code&gt;CHAR&lt;/code&gt; has a limit of 255.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The limit for VARCHAR was lifted from 255 on MySQL 5.0.3. And it is 21844
when using UTF-8 (the real UTF8 not UTF8 :)).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-keep-mysql-then&quot;&gt;Why keep MySQL then?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given all these subtleties why keep MySQL instead of going with something else,
seems to be a legitimate question. After all some people may be used to the level
of strictness of some other vendor&amp;#8217;s products and may not tolerate these &quot;things&quot;.
But just as in every other technological decision there are many other factors
and forces involved&amp;#8201;&amp;#8212;&amp;#8201;dark and light. And in this particular case I think there
are more light forces than dark. Though these are my personal reasons for keeping
it I think they will resonate with you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ecosystem (WordPress, Drupal, &lt;code&gt;&amp;lt;insert-your-favorite-cms-here&amp;gt;&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s open source, free, has a great community, and lots of resources to learn
from on the web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not that bad, you just have to educate yourself, discipline it by setting
the SQL mode to be reasonable default server wise, and start taking the warnings
it produces seriously. Whenever you MySQL says there was a warning, &lt;code&gt;SHOW&lt;/code&gt; it
as to better decide how to proceed from there.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I promised not to make comparisons with other products, but I&amp;#8217;d be remiss if I
didn&amp;#8217;t mention that if these issues are really bothering you then perhaps you can
try a different distribution of MySQL other than the default one, which usually
have more saner defaults out of the box, like: Percona Server, MariaDB, Drizzle
or WebScaleSQL. They&amp;#8217;re are MySQL after all.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this has been informative for you. Drop a comment bellow if you found
something fishy, agree with my views, or have something to add.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;refs&quot;&gt;Refs:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html&quot;&gt;Server SQL Modes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://mathiasbynens.be/notes/mysql-utf8mb4&quot;&gt;How to support full Unicode in MySQL databases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tocker.ca/2014/01/24/proposal-to-enable-sql-mode-only-full-group-by-by-default.html&quot;&gt;Proposal to enable sql mode ONLY_FULL_GROUP_BY by default&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mysqlserverteam.com/mysql-5-7-only_full_group_by-improved-recognizing-functional-dependencies-enabled-by-default&quot;&gt;MySQL 5.7: only_full_group_by Improved, Recognizing Functional Dependencies, Enabled by Default!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 04 May 2018 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2018/05/04/mysql-subtleties/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2018/05/04/mysql-subtleties/</guid>
        
        <category>Database</category>
        
        <category>MySQL</category>
        
        <category>SQL</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Re-learning the JavaScript inheritance that doesn't exist</title>
        <description>&lt;p&gt;Yes, they lied, big time. All you have is delegation and copying properties.
They say it’s inheritance but that is due to JS trying to accommodate the
classical inheritance object-orientation model to cater for a smooth
transition of “Java” people into JavaScript.
Personally, I think this creates more confusion than it helps. If people
were taught straight from the beginning, the real gospel instead of trying
to “travestize” it for them there wouldn’t be much confusion, but well,
it is what it is.&lt;/p&gt;

&lt;p&gt;To understand why and how things came to be, we need to look a bit and
understand JavaScript’s history.
In the beginning, when Brendan Eich was creating the language, his intention
was bring &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_%28programming_language%29&quot;&gt;Scheme&lt;/a&gt;
into the browser, and that’s where JS gets the whole prototype inheritance
thing (which doesn’t exist). Overtime though, as Java was the mainstream
programming language back then, he was asked to “massage” the language as
to make it more “familiar” for Java developers, as they were JavaScript’s
potential users … and err… this is where things went wrong.
The massaging brought along &lt;code&gt;new&lt;/code&gt; and other constructs that don’t exist
in Scheme naturally.&lt;/p&gt;

&lt;p&gt;One of the main concepts in prototypal inheritance (that doesn’t exist)
is that of a &lt;strong&gt;prototype&lt;/strong&gt;, so, let’s start by getting into what that is
before touching other parts.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-prototype&quot;&gt;What is a prototype&lt;/h2&gt;

&lt;p&gt;A prototype is a friend object (not parent) from which other objects
can borrow properties (values and functions/methods) by delegating the
lookup of properties they don’t have to it;&lt;/p&gt;

&lt;p&gt;A good analogy is: you need a pen but do not have a pen, but you have a
friend. So, you can ask it to your friend. But, then your friend may as-well
not have a pen, so, he’ll ask it to his friend and so on and so forth.
Then, whenever a friend in your friends-chain has a pen, then it will
be passed (not down) through the chain until you, so you can use it as
yours.&lt;/p&gt;

&lt;p&gt;The way this applies to JS, is that all objects have a property called
&lt;code&gt;__proto__&lt;/code&gt; (not &lt;code&gt;prototype&lt;/code&gt;, but which we – creatively – call “prototype”)
that references a friend object to which they delegate property lookup
whenever they do not have the intended property. By default, this friend
object is &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example illustrates it better:&lt;/p&gt;

&lt;p&gt;We start by creating a simple dumb dog object with a sound property with
the value ‘woof!’&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var dog = {
    sound: 'woof!'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created the dog object using objects literals: &lt;code&gt;{}&lt;/code&gt;. And just like
all other objects, when they are initially created (before &lt;code&gt;new&lt;/code&gt; or
&lt;code&gt;Object.create()&lt;/code&gt; does anything to them) the dog object has a &lt;code&gt;__proto__&lt;/code&gt;
property that references the &lt;code&gt;Object.prototype&lt;/code&gt; object.
We can verify this statement by doing a comparison or printing the
contents of both in the console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;dog.__proto__ === Object.prototype // =&amp;gt; true
console.log(dog.__proto__)
console.log(Object.prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, considering the dog object created above, not very useful in its
presents state, let’s say we’d like it to do something, say make a sound.
We could add a method on the dog object that allows it to make a sound,
but, lets consider that asides our dog object, our program will need
other objects to make sounds.
Well, we could add a function to each of those objects. But if we think
of it, we quickly realize it’s impractical to have N copies of the same
function. So, instead, what we can do is create a “friend” object with
the function and then tell all of these objects to become friends with
it, such that we reuse that single method all over.&lt;/p&gt;

&lt;p&gt;Applying that in JS would be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Create the &quot;future&quot; friend object
var animal = {
    makeSound: function() {
        console.log(this.sound)
    }
}

// set the friend object. Makes `dog.__proto__` reference the animal object
Object.setPrototypeOf(dog, animal);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can safely call &lt;code&gt;dog.makeSound()&lt;/code&gt; and have the output of &lt;code&gt;'woof!'&lt;/code&gt;
as expected.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;animal is not a “parent” of dog. It’s a friend.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dog didn’t inherit &lt;code&gt;makeSound&lt;/code&gt; from animal. It delegated what it didn’t
have (&lt;code&gt;makeSound()&lt;/code&gt;) to animal.
Should it have inherited, then &lt;code&gt;makeSound()&lt;/code&gt; would be its own property
(we can verify if an object owns as property with &lt;code&gt;.hasOwnProperty(propertyName)&lt;/code&gt;),
and wouldn’t go away when we remove it from animal. In the same way
that if we add properties to animal, dog will be able to access them
as if they were its own.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  dog.hasOwnProperty('makeSound') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prototype-vs-prototype-vs-__proto__&quot;&gt;prototype vs &lt;code&gt;.prototype&lt;/code&gt; vs &lt;code&gt;.__proto__&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;prototype is the term used to speak of the friend object referenced by
&lt;code&gt;.__proto__&lt;/code&gt; in any object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.prototype&lt;/code&gt; is a property that exists in functions, to hold the reference
to the future “friend” of the objects created by call the function using
the &lt;code&gt;new&lt;/code&gt; operator. Quite a mouthful, so let’s dig into it.&lt;/p&gt;

&lt;p&gt;The first bit that should be clarified is that almost everything in
JavaScript is an object, and that includes functions. Which means that
functions can have properties (values and methods).&lt;/p&gt;

&lt;p&gt;The common function properties are: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;arguments&lt;/code&gt;,
&lt;code&gt;prototype&lt;/code&gt;, &lt;code&gt;__proto__&lt;/code&gt;, &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We already seen what &lt;code&gt;__proto__&lt;/code&gt; is and the important bit about it for
functions is that it references Function.prototype, the snippet bellow
proves the point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sum(a,b) { return a + b; }

sum.__proto__ === Function.prototype // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should turn our focus to the prototype property. What with it?&lt;/p&gt;

&lt;p&gt;So, as said before, during the development of JS Brendan Eich was asked
to make it look like Java and so he introduced what Douglas Crockford
calls pseudo-classical inheritance (again doesn’t exist for real).&lt;/p&gt;

&lt;p&gt;The gist of pseudo-classical inheritance is that we create a function
which will be the constructor of new objects of its type. And then
we add properties that will be shared by the objects of that type in the
function’s &lt;code&gt;.prototype&lt;/code&gt; object. Then we instantiate objects of that type
by calling the function preceded by the new operator. Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Person(name, birthdate) {
    this.name = name;
    this.birthdate = birthdate;
}

Person.prototype.getAge = function() {
    // some code in here that computes the age based on birthDate
}

var zezinho = new Person('Zezinho dos Anjos', Date('1989-03-23'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage what we already prove what was said earlier, that the
prototype property of functions serves to hold the value of the future
&lt;code&gt;__proto__&lt;/code&gt; of objects created by invoking the function with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.__proto__ === Person.prototype // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works just like before… for instance, &lt;code&gt;getAge()&lt;/code&gt; is not a property
of zezinho, it was lent to him by the friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.hasOwnProperty('getAge') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This whole “prototype” as a function property construct was made to allow
the “Java” people to easily embark into JS and the way it works is with
&lt;code&gt;new&lt;/code&gt; doing some “stuff” on the background.&lt;/p&gt;

&lt;p&gt;If were to implement &lt;code&gt;new&lt;/code&gt; ourselves it would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
    @param {function} constructorFunction - the constructor function
    @param {...*} constructorArguments - the constructor arguments
    @returns {object} the newly created object
 */
function makeNew() {
    // THIS IS NOT IMPORTANT BUT REQUIRED
    // ---
    var args = Array.prototype.slice.call(arguments);
    var constructorFunction = args.splice(0, 1)[0];

    // HERE IS WHAT MATTERS
    // ---

    // 1. create new obj with literals. Yes the only way there's ever to create objects. new and Object.create just use it internally
    var obj = {};
    // 2. Set &quot;own&quot; properties of obj, i.e. those that return true when queried via hasOwnProperty
    constructorFunction.apply(obj, args);
    // 3. set the &quot;friend&quot;/prototype of obj
    Object.setPrototypeOf(obj, constructorFunction.prototype);
    // 4. return the new object
    return obj;
}

var luizinho = makeNew(Person, 'Luizinho', new Date('1989-01-01'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally to prove this works as the “normal”new&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.prototype === luizinho.prototype // =&amp;gt; true
luizinho.hasOwnProperty('getAge') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;whats-is-this-objectcreate-youve-mentioned&quot;&gt;Whats is this Object.create you’ve mentioned?&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Object.create(prototype)&lt;/code&gt; is the child of Douglas Crockford, born on
the hate he has for pseudo-classical and inherently &lt;code&gt;new()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Object.create is a form of doing &lt;code&gt;new&lt;/code&gt; the prototypal way, without the
awkwardness and indirection of pseudo-classical.&lt;/p&gt;

&lt;p&gt;Implementing Object.create we would have, something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
    @param {function} prototype - the object to set as prototype(__proto__)  of the new object
    @param {object} ownProperties - object with properties that are going to be copied to the new object
    @returns {object} the newly created object
*/
function objectCreate(prototype, ownProperties) {
     // 1. create new obj with literals. Yes the only way there's ever to create objects. new and Object.create just use it internally
    var obj = {};
    // 2. Set &quot;own&quot; properties of obj, i.e. those that return true when queried via hasOwnProperty
    for (var propName in ownProperties) {
        obj[propName] = ownProperties[propName];
    }
    // 3. set the &quot;friend&quot;/prototype of obj
    Object.setPrototypeOf(obj, prototype);
     // 4. return the new object
    return obj;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our “zezinho” could be created like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var person = {
    getAge: function() { /* ... compute and return age */ }
}
var zezinho = objectCreate(person, {name: 'Zezinho dos Anjos', birthdate: Date('1989-03-23')})

// we could also have done...
var zezinho = objectCreate(Person.prototype, {name: 'Zezinho dos Anjos', birthdate: Date('1989-03-23')})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyhow our proof:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.hasOwnProperty('getAge') // false
zezinho.hasOwnProperty('name') // true

person.isHuman = function() { return true; } // adding something to prototype makes it &quot;findable&quot; to those who friended the object
zezinho.isHuman() // =&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;There’s no inheritance in JavaScript. Only property delegation and copying.
    &lt;ul&gt;
      &lt;li&gt;If a property is removed from the “friended object” object the other object no longer can use it&lt;/li&gt;
      &lt;li&gt;As we saw in the &lt;code&gt;objectCreate&lt;/code&gt;, the &lt;code&gt;ownProperties&lt;/code&gt; were copied from another object. We can expand on this and compose objects from others further improving reuse.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s only one way of creating objects and that’s with object literals. &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;Object.create&lt;/code&gt; just create the literal internally, add properties to it, link to a prototype and return it. No magic! We can implement this ourselves&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;__proto__&lt;/code&gt; is a property of all objects (even functions)&lt;/li&gt;
  &lt;li&gt;prototype exists as two concepts:
    &lt;ol&gt;
      &lt;li&gt;the friend object to which objects delegate property lookup (&lt;code&gt;__proto__&lt;/code&gt;) and&lt;/li&gt;
      &lt;li&gt;the property of all functions used to keep future friend (read &lt;code&gt;__proto__&lt;/code&gt;) object of new objects created by calling the function using the &lt;code&gt;new()&lt;/code&gt; operator&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Prototypes exist as a form reuse. And the way they’ve been made / thought-of, they have a beautiful side-effect that the classical inheritance object-oriented form of reuse doesn’t have, which is to save memory. That is, in the classical form, each instance of an object has all the details about it (the whole pack of properties it inherited), while with prototypes only references are kept to where to find the properties, so rather than say 1000 copies only 1 exists. This is exceptionally well thought, and is specially useful given the resource constraint limits imposed by the web browsers environment.&lt;/li&gt;
  &lt;li&gt;The decision to add &lt;code&gt;new&lt;/code&gt; and pseudo-classical pattern just created more confusion and disinformation to the community and language users. It should serve as a lesson to future endeavors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;/h2&gt;

&lt;p&gt;Last but not least, I was only able to figure this out after watching the
&lt;a href=&quot;https://www.youtube.com/playlist?list=PL0zVEGEvSaeHBZFy6Q8731rcwk0Gtuxub&quot;&gt;Object creation YouTube video series&lt;/a&gt;
on &lt;a href=&quot;http://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q&quot;&gt;funfunfunction&lt;/a&gt;
by &lt;a href=&quot;https://twitter.com/mpjme&quot;&gt;Matthias Johansson&lt;/a&gt;, so I strongly recommend
watching those to all JS people out there.&lt;/p&gt;

&lt;p&gt;A zillion “Good Monday mornings!” for you Matthias.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 08:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2017/04/06/js-inheritance-doesnt-exist/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2017/04/06/js-inheritance-doesnt-exist/</guid>
        
        <category>JavaScript</category>
        
        <category>Object-Orientation</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Writing reliable and robust code with Design by Contract</title>
        <description>&lt;h2 id=&quot;emotional-intro&quot;&gt;(Emotional) Intro&lt;/h2&gt;

&lt;p&gt;Not a day passes without us hearing of some software woe that has happened
somewhere in the world. Bugs, bugs, bugs users scream…&lt;/p&gt;

&lt;p&gt;I mean, Wikipedia even keeps a &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_software_bugs&quot;&gt;list of the most “awesome” bugs in the world&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As software developers/engineers/craftsman/gardeners
in order to sleep peacefully at night we must make sure that no bugs are in our code.&lt;/p&gt;

&lt;p&gt;But that’s just thinking of ourselves. The real motivation for wanting reliable
and robust code is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software failures are expensive - so we want reliable software&lt;/li&gt;
  &lt;li&gt;Software itself is expensive - so we want reusable software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In face of these two very critical quality demands on software, Design by Contract
emerges as the industry’s most comprehensive method for ensuring reliability, by
which we mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correctness - software does what is supposed to do (works as per the specification)&lt;/li&gt;
  &lt;li&gt;Robustness - software acts acceptably in cases in which it cannot do what it
is supposed to&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-is-design-by-contract&quot;&gt;So what is Design by Contract?&lt;/h2&gt;

&lt;p&gt;Coined by &lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Meyer&quot;&gt;Bertrand Meyer&lt;/a&gt;
&lt;em&gt;Design by Contract&lt;/em&gt; (DbC), is an approach for designing software. It prescribes
that software designers should define formal, precise and verifiable interface
specifications for software components, which extend the ordinary definition of
abstract data types with &lt;em&gt;pre-conditions&lt;/em&gt;, &lt;em&gt;post-conditions&lt;/em&gt; and &lt;em&gt;invariants&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;These specifications are referred to as “contracts”, in accordance with a conceptual
metaphor with the conditions and obligations of business contracts.&lt;/p&gt;

&lt;p&gt;Software contracts are like business contracts, in that they are characterized
by relations of client-supplier and obligations-benefits.
Also, just like business contracts, software contracts can be broken, by either
party, by not meeting with their obligations.&lt;/p&gt;

&lt;p&gt;The important bit here is that, since in software the contract must run within
its specifications, breaking a contract indicates the presence of a defect or bug.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pre-conditions-post-conditions-and-invariants&quot;&gt;Pre-Conditions, Post-Conditions and Invariants&lt;/h1&gt;

&lt;p&gt;In software programming the smallest unit of functionality is a routine and so,
if we want to ensure reliability, we must tackle the problem at this level.
What DbC then says is that we must define correctness for any routine by clearly
and explicitly indicating its:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pre-conditions - the conditions that must be true in order for the routine to
work correctly&lt;/li&gt;
  &lt;li&gt;post-conditions - the conditions that will be true after its execution, if the
routine has worked correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And more than just defining the pre-conditions and post-conditions, we must embed
them into code, in such way that whenever the code runs, its self validating,
taking a pro-active position towards avoiding bugs rather than applying defensive
programming.&lt;/p&gt;

&lt;p&gt;(Routines is old school we do classes and objects these days…)&lt;/p&gt;

&lt;p&gt;The Object-Orientation paradigm, commonly used to design and program software,
gave us objects, a new unit of software after functions/routines. And so we must
also ensure that objects state is always valid. And in DbC we’re meant to do it
by explicitly and clearly defining it’s invariants.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;invariant - class/object wise conditions that must be valid at all times. They
can be only invalid during a routine execution, but not before or after it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If either a pre-condition, post-condition or invariant is violated an Exception
must be raised immediately, to stop the routine from not doing it’s job properly
or the object from getting into invalid state.&lt;/p&gt;

&lt;h2 id=&quot;the-command-query-separation-principle&quot;&gt;The Command-Query Separation Principle&lt;/h2&gt;

&lt;p&gt;Whenever we send messages to an object we’re essentially doing two things:&lt;/p&gt;

&lt;p&gt;1 - asking it to provide us with some insight about it’s state
2 - asking it to mutate it’s state&lt;/p&gt;

&lt;p&gt;With that in mind, Meyer divides functions into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queries: questions we can asks to object instance&lt;/li&gt;
  &lt;li&gt;Commands: actions to be taken by an object instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given this separation Meyer goes forward and provides us with the
Command-Query Separation CQS) principle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;any routine should be a query or a command but not a mixture of the two&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;any routing the changes the state of its target object should not return a value&lt;/li&gt;
  &lt;li&gt;any routine that returns a value should change the state of its target object&lt;/li&gt;
  &lt;li&gt;only procedures should do the computations that alter the state of objects.
Functions should not do that&lt;/li&gt;
  &lt;li&gt;a query is a way of asking a question about an object, and the process of
answering that question should not change the object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;but-why-would-we-need-this-cqs&quot;&gt;But why would we need this CQS?&lt;/h3&gt;

&lt;p&gt;The reason for CQS is that it is impossible for us to reason about the correctness
of the state of an object, by using queries that change the object. Because we
use the queries attributes and functions to construct our pre-conditions and
post-conditions. If one of the functions were to change the object then the
result would no longer be valid.&lt;/p&gt;

&lt;h2 id=&quot;how-to-implement-dbc&quot;&gt;How to implement DbC&lt;/h2&gt;

&lt;p&gt;The question about implementation is programming-tools bound, it mostly depends
upon the language one is using. Some programming languages like &lt;a href=&quot;https://en.wikipedia.org/wiki/D_(programming_language)&quot;&gt;Eiffel&lt;/a&gt;
(designed by Meyer) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Eiffel_(programming_language)&quot;&gt;D&lt;/a&gt;
provide language keywords and constructs for applying it. But most “mainstream”
programming languages do not.&lt;/p&gt;

&lt;p&gt;The fact that these languages don’t provide tools for it though doesn’t mean
we’re by any means restricted from applying DbC. We just have to be a little bit
more creative. In fact all we need are boolean conditions and exceptions.&lt;/p&gt;

&lt;p&gt;All we have to do is strategically place (based on verification type, i.e
pre-condition, post..) conditional checks in the code, that raise exceptions when
not met.&lt;/p&gt;

&lt;p&gt;The whole gist of DbC is summarized in the code snippet bellow that exhibits an
example of an hypothetical Bank Account object, which as per DbC guidelines must
protect it self from getting into an invalid state.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Account(object):

    def __init__(self, name: Name, currency: Currency):
        self._name = name
        self._currency = currency

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

    @property
    def balance(self) -&amp;gt; Decimal:
        &quot;&quot;&quot;Query that fetches account balance.&quot;&quot;&quot;
        return self._compute_balance()

    def deposit(self, amount: Decimal) -&amp;gt; None:
        &quot;&quot;&quot;Command that records a new deposit transaction on the account.&quot;&quot;&quot;

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

        # Check Pre-Conditions (conditions that must be true for routine to work correctly)
        assert amount &amp;gt; 0, 'Deposit amount must always be greater than zero'

        # Keep a copy of the original object to verify post-conditions
        old = copy.deepcopy(self)

        # record a new transaction (mutate object)

        # Check Post-Condition (conditions that must be true after routine execution)
        assert self.balance == old.balance + amount

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

    def protect_class_invariants(self):
        &quot;&quot;&quot;Checks Invariants (conditions that must always be true) for this object.

        Raises:
            AssertionError: If any class invariant is not held.
        &quot;&quot;&quot;
        assert self.balance &amp;gt; 0, 'Account balance must always be greater than zero'

    def _compute_balance(self) -&amp;gt; Decimal:
        &quot;&quot;&quot;Computes account balance based on transaction history&quot;&quot;&quot;
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Because we have the contracts we don’t have to do any guess work as to determine
which routines we have to protect with try-catches&lt;/li&gt;
  &lt;li&gt;The rules of execution are clear and simple, that is every call to a routine
can complete in only two ways:
    &lt;ul&gt;
      &lt;li&gt;the routine fulfills its contract&lt;/li&gt;
      &lt;li&gt;the routine fails to fulfill its contract, raising an exception to its caller,
which in turn can either retry of fail himself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Built-in correctness
    &lt;ul&gt;
      &lt;li&gt;Specification kept with code&lt;/li&gt;
      &lt;li&gt;Self-checking, self-debugging code (if pre-condition is violated the caller
is sick, if a post-condition is violated the callee routine is sick, if an
invariant is violated then the last callee routine is sick)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basis for exception handling
    &lt;ul&gt;
      &lt;li&gt;Framework for robustness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Higher reuse levels - due to code reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;DbC is a very simple and proven technique which every developer should learn and
try to apply to software being developed in order to guarantee robustness and
reliability&lt;/p&gt;

&lt;p&gt;No framework/library/base class is necessary in order to use DbC. In fact I advise
against that, as any of those components, although saving key strokes, can
introduce a level of indirection to the code, which would otherwise be clearer
with, just the basic language features being used.&lt;/p&gt;

&lt;p&gt;(It is arguable but) DbC in grand part takes care of unit-testing, as it is
constantly ensuring that it is doing things properly. Further more, this is what
unit testing tries to fix, and it does indeed do a good job, but it is not as
powerful because there’s a limit to how much it can “spy” into the System Under
Test to assert if it is indeed working properly.&lt;/p&gt;

&lt;h2 id=&quot;aside&quot;&gt;Aside&lt;/h2&gt;

&lt;p&gt;From the idea of the CQS principle, &lt;a href=&quot;https://twitter.com/gregyoung&quot;&gt;Gregory Young&lt;/a&gt;
and &lt;a href=&quot;http://udidahan.com&quot;&gt;Udi Dahan&lt;/a&gt; derived &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn568103.aspx&quot;&gt;CQRS&lt;/a&gt;,
which is essentially applying CQS at an architectural level.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2017/01/08/writting-reliable-and-robust-code-with-design-by-contract/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2017/01/08/writting-reliable-and-robust-code-with-design-by-contract/</guid>
        
        <category>Design by Contract</category>
        
        <category>Python</category>
        
        <category>Domain-Driven Design</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Simple JavaScript Currying Using bind</title>
        <description>&lt;p&gt;I was working on a nodejs project with mighty &lt;a href=&quot;https://github.com/giannis&quot;&gt;@giannis&lt;/a&gt;
and we had this library that required setting up event handlers, pretty much in
the usual form of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;libObject.on('event', function(param) {
    // handling code using the same libObject.
    // It's very important and compulsory using libObject here.
    return libObject.someMethod();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No issues with that, but a new business requirement lead us to need many
instances of that &lt;code&gt;libObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I thought about it the naive way and created an array with the &lt;code&gt;libObject&lt;/code&gt;s,
then extracted the handler functions into standalone functions I could set in each
of the &lt;code&gt;libObject&lt;/code&gt; pretty much like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var libObjectCollection = {};

var handlerfn = function(param) {

};

for (var key in libObjectCollection) {
    libObjectCollection[key].on('event', handlerfn);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is where the challenge begun, as in the &lt;code&gt;handlerfn&lt;/code&gt; I could no longer
know which &lt;code&gt;libObject&lt;/code&gt; instance I should call.&lt;/p&gt;

&lt;p&gt;That’s when might &lt;a href=&quot;https://github.com/giannis&quot;&gt;@giannis&lt;/a&gt; told me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mate, just use “bind” on the &lt;code&gt;handlerfn&lt;/code&gt;, and pass in the key/id of the instance
you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I already knew that functions are first class objects in JavaScript, and
that they can be passed around, and even have methods called on them. Specifically
I already knew about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;,
but I had never had a case in which &lt;code&gt;bind&lt;/code&gt; was needed.&lt;/p&gt;

&lt;p&gt;So, first stop.. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bind() method creates a new function that, when called, has its this
keyword set to the provided value, with a given sequence of arguments preceding
any provided when the new function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;that meant I could go like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var handlerfn = function(libObject, param) {

};

for (var key in libObjectCollection) {
    libObjectCollection[key].on('event', handlerfn.bind(null, libObjectCollection[key], param));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter into the bind method is the new &lt;code&gt;this&lt;/code&gt; or context under which
the returned function will run when called in the future.&lt;/p&gt;

&lt;p&gt;Following is the key I need for &lt;code&gt;libObject&lt;/code&gt; and last is whichever params the
library will pass into the fn when calling.&lt;/p&gt;

&lt;p&gt;Last but not least, as I pointed above … this was the the naive way… In the
very end, since this was a NodeJS project and we were already using &lt;a href=&quot;http://pm2.keymetrics.io&quot;&gt;PM2&lt;/a&gt;,
we just created n &lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/application-declaration/&quot;&gt;different processes each with it’s own configuration&lt;/a&gt;
and didn’t need to change the code.&lt;/p&gt;

&lt;p&gt;Despite that I’m thankful I found this issue for now I’ve learned this lesson.
BTW, in FP circles developers call this thing we tried to do with &lt;code&gt;bind&lt;/code&gt;
&lt;a href=&quot;https://www.sitepoint.com/currying-in-functional-javascript/&quot;&gt;currying&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/10/12/simple-javascript-currying-using-bind/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/10/12/simple-javascript-currying-using-bind/</guid>
        
        <category>JavaScript</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Improving the Flask cache decorator</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my rumblings developing flask applications I found the &lt;a href=&quot;http://flask.pocoo.org/docs/0.11/patterns/viewdecorators/#caching-decorator&quot;&gt;caching decorator&lt;/a&gt;.
The decorator is a short and well-written piece of code, but I feel like it misses
the few points bellow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It only caches on the server side and doesn&amp;#8217;t leverage the client-side cache -
meaning that clients still have to go and hit the server every single time they
require a resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It doesn&amp;#8217;t respect the &lt;code&gt;no-cache&lt;/code&gt; requirement from the client (although I
understand why one may not want this, as it would mean busting cache every single
time someone asks for it, thus creating the possibility of reducing the caching
effort and benefits to zero)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way I try to improve it is by having a decorator that easily allows me to
define a caching-control policy per view, that involves both the client-side and
server-side, by following the flow-chart bellow, taken from the &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot;&gt;HTTP Caching&lt;/a&gt;
article by Google Guru &lt;a href=&quot;https://www.igvita.com/&quot;&gt;Ilya Grigorik&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/content/2016/08/http-cache-decision-tree.png&quot; alt=&quot;http cache decision tree&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. HTTP cache decision tree&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Linus Torvalds
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import binascii
import datetime
from flask import Response, make_response

def cached(cacheable=False, must_revalidate=True, client_only=True, client_timeout=0, server_timeout=(5 * 60), key='view/%s'):
&quot;&quot;&quot;
See:
- https://jakearchibald.com/2016/caching-best-practices/
- https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching
&quot;&quot;&quot;
def decorator(f):
  @wraps(f)
  def decorated_function(*args, **kwargs):
    cache_key = key % request.full_path # include query string
    cache_policy = ''
    etag = ''
    if not cacheable:
      cache_policy += ', no-store' # tells the browser not to cache at all
    else:
      if must_revalidate: # this looks contradicting if you haven't read the article.
        # no-cache doesn't mean &quot;don't cache&quot;, it means it must check
        # (or &quot;revalidate&quot; as it calls it) with the server before
        # using the cached resource
        cache_policy += ', no-cache'
      else:
        # Also must-revalidate doesn't mean &quot;must revalidate&quot;, it
        # means the local resource can be used if it's younger than
        # the provided max-age, otherwise it must revalidate
        cache_policy += ', must-revalidate'

      if client_only:
        cache_policy += ', private'
      else:
        cache_policy += ', public'

      cache_policy += ', max-age=%d' % (client_timeout)

    headers = {}
    cache_policy = cache_policy.strip(',')
    headers['Cache-Control'] = cache_policy
    now = datetime.datetime.utcnow()

    client_etag = request.headers.get('If-None-Match')

    response = cache.get(cache_key)
    # respect the hard-refresh
    if response is not None and request.headers.get('Cache-Control', '') != 'no-cache':
      headers['X-Cache'] = 'HIT from Server'
      cached_etag = response.headers.get('ETag')
      if client_etag and cached_etag and client_etag == cached_etag:
        headers['X-Cache'] = 'HIT from Client'
        headers['X-Last-Modified'] = response.headers.get('X-LastModified')
        response = make_response('', 304)
    else:
      response = make_response(f(*args, **kwargs))
      if response.status_code == 200 and request.method in ['GET', 'HEAD']:
        headers['X-Cache'] = 'MISS'
        # - Added the headers to the response object instead of the
        # headers dict so they get cached too
        # - If you can find any faster random algorithm go for it.
        response.headers.add('ETag', binascii.hexlify(os.urandom(4)))
        response.headers.add('X-Last-Modified', str(now))
        cache.set(cache_key, response, timeout=server_timeout)

    response.headers.extend(headers)
    return response
  return decorated_function
return decorator&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in your views you can use it like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;@pages.route('/')
@cached(True, must_revalidate=True, client_only=False, client_timeout=120, server_timeout=5*60)
def index():
  &quot;&quot;&quot;Serve client-side application shell.&quot;&quot;&quot;
  return render_template('shell.html', model = get_default_model())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Chrome doesn&amp;#8217;t function correctly, it doesn&amp;#8217;t send the &lt;code&gt;If-None-Match&lt;/code&gt;
header effectively not allowing the client-side cache to be used at all. Maybe
it&amp;#8217;s a problem with dev-tools. So better test with Firefox Developer Edition&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, the way I deal with static content like JavaScript and CSS,
is by using far-future expiration dates and changing the URL by overriding the
&lt;code&gt;url_for&lt;/code&gt; function to include the modified date of the file on disk.
That way, cache busting is already done from the moment I save the file..&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/26/a-better-cache-decorator-for-flask/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/26/a-better-cache-decorator-for-flask/</guid>
        
        <category>Flask</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>dash(hyphen), ndash and mdash</title>
        <description>&lt;p&gt;It is common that developers use some separator on the title tag to separate the
actual page title from the site name, normally using a pipe or mid-dot or even a
dash/hyphen, thus rendering a title like: &lt;code&gt;About - StackOverflow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recently, as I was reading some HTML code, I noticed that the developer choose to
use as separator the HTML entity: &lt;code&gt;&amp;amp;ndash;&lt;/code&gt; like &lt;code&gt;&amp;lt;title&amp;gt;page title &amp;amp;ndash; sitename&amp;lt;/title&amp;gt;&lt;/code&gt;.
Which was curious to me… I mean, why not just use &lt;code&gt;-&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;I ended up googling about it and found &lt;a href=&quot;http://www.punctuationmatters.com/hyphen-dash-n-dash-and-m-dash/&quot;&gt;an article&lt;/a&gt;
which aptly explains that there’s actually 3 kinds of dashes, each meant for a
specific purpose and with a different graphic representation. The article is just
a bit &lt;em&gt;lengthy&lt;/em&gt;, so for short bellow are the differences and suggested usage of
each of the dashes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dash/hyphen - used to indicate breaks within words that wrap at the end of a
line; to connect compound words like “mass-produced”; to connect grouped numbers
like in a phone number (258 84-850-4509)&lt;/li&gt;
  &lt;li&gt;n dash - has the width of a capital N and should be used to join ranges, like
2000–2010 or July–October 2010&lt;/li&gt;
  &lt;li&gt;m dash - has the width of a capital M and is meant to set apart a unique idea
from the main clause in a sentence or to show when dialog has been interrupted:
like “Hunter strode into the room — was he mad?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is one of those small things in language that is commonly missed but is good
know.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/03/dash-hyphen-ndash-and-mdash/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/03/dash-hyphen-ndash-and-mdash/</guid>
        
        <category>NoCode</category>
        
        <category>Writing</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>BEM - block__element--modifier</title>
        <description>&lt;p&gt;Have your browsed through the internet lately and then &lt;em&gt;view-source(d)&lt;/em&gt; on some
pages? Have you noticed that almost all CSS classes resemble this pattern:
&lt;code&gt;some-thing__other-thing---change-looks&lt;/code&gt; — mind the double underscores and
double dashes… Wondering what’s that?&lt;/p&gt;

&lt;p&gt;That my friend, happens to be a newish CSS naming methodology / notation created
by the good people at &lt;a href=&quot;https://www.yandex.ru/&quot;&gt;Yandex&lt;/a&gt; called &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM - Block Element Modifier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core idea is that web pages are composed by blocks, which in turn contain
elements which in their turn can vary depending on some condition. (Blocks can
contain blocks within them BTW).
So, what is done is when assigning classes names to page elements, name them in
the form of &lt;code&gt;block__element---modifier&lt;/code&gt; depending on what an element is on the
page.&lt;/p&gt;

&lt;p&gt;The convention promises to address questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how to improve codebase reuse?&lt;/li&gt;
  &lt;li&gt;how to avoid copy-paste?&lt;/li&gt;
  &lt;li&gt;how to avoid complexity?&lt;/li&gt;
  &lt;li&gt;how to simplify refactoring and how to get self-documented code?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;To put things into perspective let’s see a practical example of how we would use
this for the simple login widget bellow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/2016/08/login-widget.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First the login widget as a whole could be considered a block, so its markup
would look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class='login-widget'&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the text labels and text fields and the button would be considered elements
of the block, and the markup for the username field could look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type='text' class='login-widget__text-field'/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And most likely when trying to submit this form without filling it, to signal to
the user that a required field is not filled, the background color of the text
field could change to red, and that’s when we a modifier would be applied. The
markup for that state with the modifier applied could look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type='text' class='login-widget__text-field login-widget__text-field--empty'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The adoption of this convention is quite huge, as for instance frameworks like
&lt;a href=&quot;https://getmdl.io/&quot;&gt;Google material lite&lt;/a&gt; use it. That is probably a sign you
should have it on your tool belt or get used to it because you’ll see it a lot
in the future.&lt;/p&gt;

&lt;p&gt;Do you think this can really address the questions above? Let me know by dropping
a comment bellow.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/&quot;&gt;Official BEM site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/02/BEM-block-element-modifier/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/02/BEM-block-element-modifier/</guid>
        
        <category>CSS</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>MySQL queries fail due to ONLY_FULL_GROUP_BY sql_mode after updating to v5.7.*</title>
        <description>&lt;p&gt;On v5.7.8, MySQL, introduced a new kind of field: the almighty &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/json.html&quot;&gt;JSON field&lt;/a&gt;,
famous for its versatility and glory in the NoSQL world.&lt;/p&gt;

&lt;p&gt;In a quest for staying up-to-date, using, benefiting and profiting from its awesome
features — blog post on we use it coming soon — we had to upgrade our server
from the now old v5.6.10.&lt;/p&gt;

&lt;p&gt;The upgrade process was smooth and nothing of extraordinary popped-up in the logs
— yes, we kept watch for a while just to make sure — so we believed we were
safe … but, we were not …&lt;/p&gt;

&lt;p&gt;A few hours later, errors like the following started filling the log:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Database error Expression #2 of SELECT list is not in GROUP BY clause and contains
non-aggregated column &lt;code&gt;&amp;lt;column-name&amp;gt;&lt;/code&gt; which is not functionally dependent on
columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
for query &lt;code&gt;&amp;lt;select-query-which-old-version-let-pass&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two things to notice here&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All of these queries were running before and MySQL was ok with how they were
  written.&lt;/li&gt;
  &lt;li&gt;The error message mentions incompatibility with a &lt;code&gt;sql_mode=only_full_group_by&lt;/code&gt;.
  So what is this &lt;code&gt;sql_mode&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is what the official documentation has to say about the &lt;code&gt;sql_mode&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The MySQL server can operate in different SQL modes, and can apply these modes
differently for different clients, depending on the value of the sql_mode system
variable. DBAs can set the global SQL mode to match site server operating
requirements, and each application can set its session SQL mode to its own
requirements.&lt;/p&gt;

  &lt;p&gt;Modes affect the SQL syntax MySQL supports and the data validation checks it
performs. This makes it easier to use MySQL in different environments and to
use MySQL together with other database servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That meant to us that somewhere in this new version, MySQL changed it’s &lt;code&gt;sql_mode&lt;/code&gt;,
and that we have to find this place and change things back. Again the official
documentation helped us confirming our suspicious as it states that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In MySQL 5.7.5, the ONLY_FULL_GROUP_BY SQL mode is enabled by default because
GROUP BY processing has become more sophisticated to include detection of
functional dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The temporary solution which we adapted was to set the &lt;code&gt;sql_mode&lt;/code&gt; to an empty
value which then defaults to &lt;code&gt;NO_AUTO_CREATE_USER&lt;/code&gt; which came as default for v5.6.10&amp;gt;.
But, in the end we’ll have to upgrade our queries to be compliant with the new
&lt;code&gt;sql_mode&lt;/code&gt; as definitive fix.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.anujgakhar.com/2015/12/23/mysql-error-caused-by-sql_modeonly_full_group_by/&quot;&gt;MySQL Error caused by sql_mode=only_full_group_by&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-10.html&quot;&gt;Changes in MySQL 5.6.10 (2013-02-05, General Availability)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-changes&quot;&gt;SQL Mode Changes in MySQL 5.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/06/21/MySQL-Queries-failing-due-to-sql_mode=only_full_group_by-being-enabled-by-default-on-MySQL-5.7-update/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/06/21/MySQL-Queries-failing-due-to-sql_mode=only_full_group_by-being-enabled-by-default-on-MySQL-5.7-update/</guid>
        
        <category>Database</category>
        
        <category>MySQL</category>
        
        <category>SQL</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Interview during the SeedStars World - Maputo 2015 Contest!</title>
        <description>&lt;iframe src=&quot;http://rd.videos.sapo.mz/playhtml?file=http://rd.videos.sapo.mz/j9MqVow8bUIEWdRVDebE/mov/1&amp;amp;relatedVideos=none&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;400&quot; height=&quot;225&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 26 May 2015 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2015/05/26/Interview-at-the-Seed-Stars-World-Maputo-Contest-2015/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2015/05/26/Interview-at-the-Seed-Stars-World-Maputo-Contest-2015/</guid>
        
        <category>Startup</category>
        
        <category>Entrepreneurship</category>
        
        
        <category>Startup</category>
        
      </item>
    
      <item>
        <title>Colocando Proxy no Ubuntu</title>
        <description>&lt;h2 id=&quot;no-sistema-operativo&quot;&gt;No Sistema operativo&lt;/h2&gt;

&lt;p&gt;Para usar proxy em seu Ubuntu edite o ficheiro &lt;code&gt;/etc/environment&lt;/code&gt; adicionado com
a estrutura seguinte:
&lt;code&gt;tipo_de_proxy=&quot;http://usuario@senha@servidor:porta&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para quem usa uma conta de domínio, é sugestivo colocar o domínio como parte da
linha como abaixo:
&lt;code&gt;tipo_de_proxy=&quot;http://dominio/usuario@senha@servidor:porta&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A seguir um exemplo completo do ficheiro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Proxy settings
http_proxy=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
https_proxy=&quot;http://dominio/usuario@s3n#4prx@server:8080&quot;
ftp_proxy=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;
HTTP_PROXY=&quot;http://dominio/usuario@s3n#4@server:8080&quot;
HTTPS_PROXY=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
FTP_PROXY=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
NO_PROXY=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note que para o endereço local nem sempre queremos usar o proxy dai o &lt;code&gt;no_proxy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;no-gestor-de-pacotes-apt&quot;&gt;No gestor de pacotes APT&lt;/h2&gt;

&lt;p&gt;Após colocar o proxy no sistema operativo, notará que os gestor de pacotes APT
não consegue buscar novos pacotes. Isto porque ele usa uma outra configuração
para o proxy.&lt;/p&gt;

&lt;p&gt;A configuração consite em modificar/criar o ficheiro &lt;code&gt;/etc/apt/apt.conf&lt;/code&gt;
adicionando nele uma linha com a estrutura:
&lt;code&gt;Acquire::http::Proxy &quot;http://dominio\usuario:senha@servidor:porta&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NOTE:&lt;/p&gt;

&lt;p&gt;Apesar da estrutura de linha ser muito similar. Existe uma diferença na barra
que separa o &lt;code&gt;dominio&lt;/code&gt; do &lt;code&gt;nome_de_usuario&lt;/code&gt;. Para o proxy de OS a barra deve ser
para direita e para o proxy de APT é para a esquerda.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Aug 2014 17:20:19 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2014/08/23/putting-a-proxy-on-ubuntu/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2014/08/23/putting-a-proxy-on-ubuntu/</guid>
        
        <category>Note</category>
        
        <category>bash</category>
        
        
        <category>Coding</category>
        
      </item>
    
  </channel>
</rss>

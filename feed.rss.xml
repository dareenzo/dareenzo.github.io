<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paulo Phagula</title>
    <description>Paulo Phagula's Blog on Software Engineering and related topics
</description>
    <link>https://dareenzo.github.io/</link>
    <pubDate>Sun, 18 Mar 2018 12:47:01 +0200</pubDate>
    <lastBuildDate>Sun, 18 Mar 2018 12:47:01 +0200</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Re-learning the JavaScript inheritance that doesn't exist</title>
        <description>&lt;p&gt;Yes, they lied, big time. All you have is delegation and copying properties.
They say it’s inheritance but that is due to JS trying to accommodate the
classical inheritance object-orientation model to cater for a smooth
transition of “Java” people into JavaScript.
Personally, I think this creates more confusion than it helps. If people
were taught straight from the beginning, the real gospel instead of trying
to “travestize” it for them there wouldn’t be much confusion, but well,
it is what it is.&lt;/p&gt;

&lt;p&gt;To understand why and how things came to be, we need to look a bit and
understand JavaScript’s history.
In the beginning, when Brendan Eich was creating the language, his intention
was bring &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_%28programming_language%29&quot;&gt;Scheme&lt;/a&gt;
into the browser, and that’s where JS gets the whole prototype inheritance
thing (which doesn’t exist). Overtime though, as Java was the mainstream
programming language back then, he was asked to “massage” the language as
to make it more “familiar” for Java developers, as they were JavaScript’s
potential users … and err… this is where things went wrong.
The massaging brought along &lt;code&gt;new&lt;/code&gt; and other constructs that don’t exist
in Scheme naturally.&lt;/p&gt;

&lt;p&gt;One of the main concepts in prototypal inheritance (that doesn’t exist)
is that of a &lt;strong&gt;prototype&lt;/strong&gt;, so, let’s start by getting into what that is
before touching other parts.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-prototype&quot;&gt;What is a prototype&lt;/h2&gt;

&lt;p&gt;A prototype is a friend object (not parent) from which other objects
can borrow properties (values and functions/methods) by delegating the
lookup of properties they don’t have to it;&lt;/p&gt;

&lt;p&gt;A good analogy is: you need a pen but do not have a pen, but you have a
friend. So, you can ask it to your friend. But, then your friend may as-well
not have a pen, so, he’ll ask it to his friend and so on and so forth.
Then, whenever a friend in your friends-chain has a pen, then it will
be passed (not down) through the chain until you, so you can use it as
yours.&lt;/p&gt;

&lt;p&gt;The way this applies to JS, is that all objects have a property called
&lt;code&gt;__proto__&lt;/code&gt; (not &lt;code&gt;prototype&lt;/code&gt;, but which we – creatively – call “prototype”)
that references a friend object to which they delegate property lookup
whenever they do not have the intended property. By default, this friend
object is &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example illustrates it better:&lt;/p&gt;

&lt;p&gt;We start by creating a simple dumb dog object with a sound property with
the value ‘woof!’&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var dog = {
    sound: 'woof!'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created the dog object using objects literals: &lt;code&gt;{}&lt;/code&gt;. And just like
all other objects, when they are initially created (before &lt;code&gt;new&lt;/code&gt; or
&lt;code&gt;Object.create()&lt;/code&gt; does anything to them) the dog object has a &lt;code&gt;__proto__&lt;/code&gt;
property that references the &lt;code&gt;Object.prototype&lt;/code&gt; object.
We can verify this statement by doing a comparison or printing the
contents of both in the console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;dog.__proto__ === Object.prototype // =&amp;gt; true
console.log(dog.__proto__)
console.log(Object.prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, considering the dog object created above, not very useful in its
presents state, let’s say we’d like it to do something, say make a sound.
We could add a method on the dog object that allows it to make a sound,
but, lets consider that asides our dog object, our program will need
other objects to make sounds.
Well, we could add a function to each of those objects. But if we think
of it, we quickly realize it’s impractical to have N copies of the same
function. So, instead, what we can do is create a “friend” object with
the function and then tell all of these objects to become friends with
it, such that we reuse that single method all over.&lt;/p&gt;

&lt;p&gt;Applying that in JS would be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Create the &quot;future&quot; friend object
var animal = {
    makeSound: function() {
        console.log(this.sound)
    }
}

// set the friend object. Makes `dog.__proto__` reference the animal object
Object.setPrototypeOf(dog, animal);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can safely call &lt;code&gt;dog.makeSound()&lt;/code&gt; and have the output of &lt;code&gt;'woof!'&lt;/code&gt;
as expected.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;animal is not a “parent” of dog. It’s a friend.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dog didn’t inherit &lt;code&gt;makeSound&lt;/code&gt; from animal. It delegated what it didn’t
have (&lt;code&gt;makeSound()&lt;/code&gt;) to animal.
Should it have inherited, then &lt;code&gt;makeSound()&lt;/code&gt; would be its own property
(we can verify if an object owns as property with &lt;code&gt;.hasOwnProperty(propertyName)&lt;/code&gt;),
and wouldn’t go away when we remove it from animal. In the same way
that if we add properties to animal, dog will be able to access them
as if they were its own.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  dog.hasOwnProperty('makeSound') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prototype-vs-prototype-vs-__proto__&quot;&gt;prototype vs &lt;code&gt;.prototype&lt;/code&gt; vs &lt;code&gt;.__proto__&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;prototype is the term used to speak of the friend object referenced by
&lt;code&gt;.__proto__&lt;/code&gt; in any object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.prototype&lt;/code&gt; is a property that exists in functions, to hold the reference
to the future “friend” of the objects created by call the function using
the &lt;code&gt;new&lt;/code&gt; operator. Quite a mouthful, so let’s dig into it.&lt;/p&gt;

&lt;p&gt;The first bit that should be clarified is that almost everything in
JavaScript is an object, and that includes functions. Which means that
functions can have properties (values and methods).&lt;/p&gt;

&lt;p&gt;The common function properties are: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;arguments&lt;/code&gt;,
&lt;code&gt;prototype&lt;/code&gt;, &lt;code&gt;__proto__&lt;/code&gt;, &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We already seen what &lt;code&gt;__proto__&lt;/code&gt; is and the important bit about it for
functions is that it references Function.prototype, the snippet bellow
proves the point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sum(a,b) { return a + b; }

sum.__proto__ === Function.prototype // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should turn our focus to the prototype property. What with it?&lt;/p&gt;

&lt;p&gt;So, as said before, during the development of JS Brendan Eich was asked
to make it look like Java and so he introduced what Douglas Crockford
calls pseudo-classical inheritance (again doesn’t exist for real).&lt;/p&gt;

&lt;p&gt;The gist of pseudo-classical inheritance is that we create a function
which will be the constructor of new objects of its type. And then
we add properties that will be shared by the objects of that type in the
function’s &lt;code&gt;.prototype&lt;/code&gt; object. Then we instantiate objects of that type
by calling the function preceded by the new operator. Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Person(name, birthdate) {
    this.name = name;
    this.birthdate = birthdate;
}

Person.prototype.getAge = function() {
    // some code in here that computes the age based on birthDate
}

var zezinho = new Person('Zezinho dos Anjos', Date('1989-03-23'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage what we already prove what was said earlier, that the
prototype property of functions serves to hold the value of the future
&lt;code&gt;__proto__&lt;/code&gt; of objects created by invoking the function with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.__proto__ === Person.prototype // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works just like before… for instance, &lt;code&gt;getAge()&lt;/code&gt; is not a property
of zezinho, it was lent to him by the friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.hasOwnProperty('getAge') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This whole “prototype” as a function property construct was made to allow
the “Java” people to easily embark into JS and the way it works is with
&lt;code&gt;new&lt;/code&gt; doing some “stuff” on the background.&lt;/p&gt;

&lt;p&gt;If were to implement &lt;code&gt;new&lt;/code&gt; ourselves it would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
    @param {function} constructorFunction - the constructor function
    @param {...*} constructorArguments - the constructor arguments
    @returns {object} the newly created object
 */
function makeNew() {
    // THIS IS NOT IMPORTANT BUT REQUIRED
    // ---
    var args = Array.prototype.slice.call(arguments);
    var constructorFunction = args.splice(0, 1)[0];

    // HERE IS WHAT MATTERS
    // ---

    // 1. create new obj with literals. Yes the only way there's ever to create objects. new and Object.create just use it internally
    var obj = {};
    // 2. Set &quot;own&quot; properties of obj, i.e. those that return true when queried via hasOwnProperty
    constructorFunction.apply(obj, args);
    // 3. set the &quot;friend&quot;/prototype of obj
    Object.setPrototypeOf(obj, constructorFunction.prototype);
    // 4. return the new object
    return obj;
}

var luizinho = makeNew(Person, 'Luizinho', new Date('1989-01-01'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally to prove this works as the “normal”new&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.prototype === luizinho.prototype // =&amp;gt; true
luizinho.hasOwnProperty('getAge') // =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;whats-is-this-objectcreate-youve-mentioned&quot;&gt;Whats is this Object.create you’ve mentioned?&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Object.create(prototype)&lt;/code&gt; is the child of Douglas Crockford, born on
the hate he has for pseudo-classical and inherently &lt;code&gt;new()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Object.create is a form of doing &lt;code&gt;new&lt;/code&gt; the prototypal way, without the
awkwardness and indirection of pseudo-classical.&lt;/p&gt;

&lt;p&gt;Implementing Object.create we would have, something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
    @param {function} prototype - the object to set as prototype(__proto__)  of the new object
    @param {object} ownProperties - object with properties that are going to be copied to the new object
    @returns {object} the newly created object
*/
function objectCreate(prototype, ownProperties) {
     // 1. create new obj with literals. Yes the only way there's ever to create objects. new and Object.create just use it internally
    var obj = {};
    // 2. Set &quot;own&quot; properties of obj, i.e. those that return true when queried via hasOwnProperty
    for (var propName in ownProperties) {
        obj[propName] = ownProperties[propName];
    }
    // 3. set the &quot;friend&quot;/prototype of obj
    Object.setPrototypeOf(obj, prototype);
     // 4. return the new object
    return obj;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our “zezinho” could be created like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var person = {
    getAge: function() { /* ... compute and return age */ }
}
var zezinho = objectCreate(person, {name: 'Zezinho dos Anjos', birthdate: Date('1989-03-23')})

// we could also have done...
var zezinho = objectCreate(Person.prototype, {name: 'Zezinho dos Anjos', birthdate: Date('1989-03-23')})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyhow our proof:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;zezinho.hasOwnProperty('getAge') // false
zezinho.hasOwnProperty('name') // true

person.isHuman = function() { return true; } // adding something to prototype makes it &quot;findable&quot; to those who friended the object
zezinho.isHuman() // =&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;There’s no inheritance in JavaScript. Only property delegation and copying.
    &lt;ul&gt;
      &lt;li&gt;If a property is removed from the “friended object” object the other object no longer can use it&lt;/li&gt;
      &lt;li&gt;As we saw in the &lt;code&gt;objectCreate&lt;/code&gt;, the &lt;code&gt;ownProperties&lt;/code&gt; were copied from another object. We can expand on this and compose objects from others further improving reuse.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There’s only one way of creating objects and that’s with object literals. &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;Object.create&lt;/code&gt; just create the literal internally, add properties to it, link to a prototype and return it. No magic! We can implement this ourselves&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;__proto__&lt;/code&gt; is a property of all objects (even functions)&lt;/li&gt;
  &lt;li&gt;prototype exists as two concepts:
    &lt;ol&gt;
      &lt;li&gt;the friend object to which objects delegate property lookup (&lt;code&gt;__proto__&lt;/code&gt;) and&lt;/li&gt;
      &lt;li&gt;the property of all functions used to keep future friend (read &lt;code&gt;__proto__&lt;/code&gt;) object of new objects created by calling the function using the &lt;code&gt;new()&lt;/code&gt; operator&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Prototypes exist as a form reuse. And the way they’ve been made / thought-of, they have a beautiful side-effect that the classical inheritance object-oriented form of reuse doesn’t have, which is to save memory. That is, in the classical form, each instance of an object has all the details about it (the whole pack of properties it inherited), while with prototypes only references are kept to where to find the properties, so rather than say 1000 copies only 1 exists. This is exceptionally well thought, and is specially useful given the resource constraint limits imposed by the web browsers environment.&lt;/li&gt;
  &lt;li&gt;The decision to add &lt;code&gt;new&lt;/code&gt; and pseudo-classical pattern just created more confusion and disinformation to the community and language users. It should serve as a lesson to future endeavors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;/h2&gt;

&lt;p&gt;Last but not least, I was only able to figure this out after watching the
&lt;a href=&quot;https://www.youtube.com/playlist?list=PL0zVEGEvSaeHBZFy6Q8731rcwk0Gtuxub&quot;&gt;Object creation YouTube video series&lt;/a&gt;
on &lt;a href=&quot;http://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q&quot;&gt;funfunfunction&lt;/a&gt;
by &lt;a href=&quot;https://twitter.com/mpjme&quot;&gt;Matthias Johansson&lt;/a&gt;, so I strongly recommend
watching those to all JS people out there.&lt;/p&gt;

&lt;p&gt;A zillion “Good Monday mornings!” for you Matthias.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 08:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2017/04/06/js-inheritance-doesnt-exist/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2017/04/06/js-inheritance-doesnt-exist/</guid>
        
        <category>JavaScript</category>
        
        <category>Object-Orientation</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Writing reliable and robust code with Design by Contract</title>
        <description>&lt;h2 id=&quot;emotional-intro&quot;&gt;(Emotional) Intro&lt;/h2&gt;

&lt;p&gt;Not a day passes without us hearing of some software woe that has happened
somewhere in the world. Bugs, bugs, bugs users scream…&lt;/p&gt;

&lt;p&gt;I mean, Wikipedia even keeps a &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_software_bugs&quot;&gt;list of the most “awesome” bugs in the world&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As software developers/engineers/craftsman/gardeners
in order to sleep peacefully at night we must make sure that no bugs are in our code.&lt;/p&gt;

&lt;p&gt;But that’s just thinking of ourselves. The real motivation for wanting reliable
and robust code is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software failures are expensive - so we want reliable software&lt;/li&gt;
  &lt;li&gt;Software itself is expensive - so we want reusable software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In face of these two very critical quality demands on software, Design by Contract
emerges as the industry’s most comprehensive method for ensuring reliability, by
which we mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correctness - software does what is supposed to do (works as per the specification)&lt;/li&gt;
  &lt;li&gt;Robustness - software acts acceptably in cases in which it cannot do what it
is supposed to&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-is-design-by-contract&quot;&gt;So what is Design by Contract?&lt;/h2&gt;

&lt;p&gt;Coined by &lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Meyer&quot;&gt;Bertrand Meyer&lt;/a&gt;
&lt;em&gt;Design by Contract&lt;/em&gt; (DbC), is an approach for designing software. It prescribes
that software designers should define formal, precise and verifiable interface
specifications for software components, which extend the ordinary definition of
abstract data types with &lt;em&gt;pre-conditions&lt;/em&gt;, &lt;em&gt;post-conditions&lt;/em&gt; and &lt;em&gt;invariants&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;These specifications are referred to as “contracts”, in accordance with a conceptual
metaphor with the conditions and obligations of business contracts.&lt;/p&gt;

&lt;p&gt;Software contracts are like business contracts, in that they are characterized
by relations of client-supplier and obligations-benefits.
Also, just like business contracts, software contracts can be broken, by either
party, by not meeting with their obligations.&lt;/p&gt;

&lt;p&gt;The important bit here is that, since in software the contract must run within
its specifications, breaking a contract indicates the presence of a defect or bug.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;pre-conditions-post-conditions-and-invariants&quot;&gt;Pre-Conditions, Post-Conditions and Invariants&lt;/h1&gt;

&lt;p&gt;In software programming the smallest unit of functionality is a routine and so,
if we want to ensure reliability, we must tackle the problem at this level.
What DbC then says is that we must define correctness for any routine by clearly
and explicitly indicating its:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pre-conditions - the conditions that must be true in order for the routine to
work correctly&lt;/li&gt;
  &lt;li&gt;post-conditions - the conditions that will be true after its execution, if the
routine has worked correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And more than just defining the pre-conditions and post-conditions, we must embed
them into code, in such way that whenever the code runs, its self validating,
taking a pro-active position towards avoiding bugs rather than applying defensive
programming.&lt;/p&gt;

&lt;p&gt;(Routines is old school we do classes and objects these days…)&lt;/p&gt;

&lt;p&gt;The Object-Orientation paradigm, commonly used to design and program software,
gave us objects, a new unit of software after functions/routines. And so we must
also ensure that objects state is always valid. And in DbC we’re meant to do it
by explicitly and clearly defining it’s invariants.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;invariant - class/object wise conditions that must be valid at all times. They
can be only invalid during a routine execution, but not before or after it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If either a pre-condition, post-condition or invariant is violated an Exception
must be raised immediately, to stop the routine from not doing it’s job properly
or the object from getting into invalid state.&lt;/p&gt;

&lt;h2 id=&quot;the-command-query-separation-principle&quot;&gt;The Command-Query Separation Principle&lt;/h2&gt;

&lt;p&gt;Whenever we send messages to an object we’re essentially doing two things:&lt;/p&gt;

&lt;p&gt;1 - asking it to provide us with some insight about it’s state
2 - asking it to mutate it’s state&lt;/p&gt;

&lt;p&gt;With that in mind, Meyer divides functions into two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queries: questions we can asks to object instance&lt;/li&gt;
  &lt;li&gt;Commands: actions to be taken by an object instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given this separation Meyer goes forward and provides us with the
Command-Query Separation CQS) principle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;any routine should be a query or a command but not a mixture of the two&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;any routing the changes the state of its target object should not return a value&lt;/li&gt;
  &lt;li&gt;any routine that returns a value should change the state of its target object&lt;/li&gt;
  &lt;li&gt;only procedures should do the computations that alter the state of objects.
Functions should not do that&lt;/li&gt;
  &lt;li&gt;a query is a way of asking a question about an object, and the process of
answering that question should not change the object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;but-why-would-we-need-this-cqs&quot;&gt;But why would we need this CQS?&lt;/h3&gt;

&lt;p&gt;The reason for CQS is that it is impossible for us to reason about the correctness
of the state of an object, by using queries that change the object. Because we
use the queries attributes and functions to construct our pre-conditions and
post-conditions. If one of the functions were to change the object then the
result would no longer be valid.&lt;/p&gt;

&lt;h2 id=&quot;how-to-implement-dbc&quot;&gt;How to implement DbC&lt;/h2&gt;

&lt;p&gt;The question about implementation is programming-tools bound, it mostly depends
upon the language one is using. Some programming languages like &lt;a href=&quot;https://en.wikipedia.org/wiki/D_(programming_language)&quot;&gt;Eiffel&lt;/a&gt;
(designed by Meyer) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Eiffel_(programming_language)&quot;&gt;D&lt;/a&gt;
provide language keywords and constructs for applying it. But most “mainstream”
programming languages do not.&lt;/p&gt;

&lt;p&gt;The fact that these languages don’t provide tools for it though doesn’t mean
we’re by any means restricted from applying DbC. We just have to be a little bit
more creative. In fact all we need are boolean conditions and exceptions.&lt;/p&gt;

&lt;p&gt;All we have to do is strategically place (based on verification type, i.e
pre-condition, post..) conditional checks in the code, that raise exceptions when
not met.&lt;/p&gt;

&lt;p&gt;The whole gist of DbC is summarized in the code snippet bellow that exhibits an
example of an hypothetical Bank Account object, which as per DbC guidelines must
protect it self from getting into an invalid state.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Account(object):

    def __init__(self, name: Name, currency: Currency):
        self._name = name
        self._currency = currency

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

    @property
    def balance(self) -&amp;gt; Decimal:
        &quot;&quot;&quot;Query that fetches account balance.&quot;&quot;&quot;
        return self._compute_balance()

    def deposit(self, amount: Decimal) -&amp;gt; None:
        &quot;&quot;&quot;Command that records a new deposit transaction on the account.&quot;&quot;&quot;

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

        # Check Pre-Conditions (conditions that must be true for routine to work correctly)
        assert amount &amp;gt; 0, 'Deposit amount must always be greater than zero'

        # Keep a copy of the original object to verify post-conditions
        old = copy.deepcopy(self)

        # record a new transaction (mutate object)

        # Check Post-Condition (conditions that must be true after routine execution)
        assert self.balance == old.balance + amount

        # Checks Invariants (conditions that must always be true) for this object.
        self.protect_class_invariants()

    def protect_class_invariants(self):
        &quot;&quot;&quot;Checks Invariants (conditions that must always be true) for this object.

        Raises:
            AssertionError: If any class invariant is not held.
        &quot;&quot;&quot;
        assert self.balance &amp;gt; 0, 'Account balance must always be greater than zero'

    def _compute_balance(self) -&amp;gt; Decimal:
        &quot;&quot;&quot;Computes account balance based on transaction history&quot;&quot;&quot;
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Because we have the contracts we don’t have to do any guess work as to determine
which routines we have to protect with try-catches&lt;/li&gt;
  &lt;li&gt;The rules of execution are clear and simple, that is every call to a routine
can complete in only two ways:
    &lt;ul&gt;
      &lt;li&gt;the routine fulfills its contract&lt;/li&gt;
      &lt;li&gt;the routine fails to fulfill its contract, raising an exception to its caller,
which in turn can either retry of fail himself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Built-in correctness
    &lt;ul&gt;
      &lt;li&gt;Specification kept with code&lt;/li&gt;
      &lt;li&gt;Self-checking, self-debugging code (if pre-condition is violated the caller
is sick, if a post-condition is violated the callee routine is sick, if an
invariant is violated then the last callee routine is sick)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basis for exception handling
    &lt;ul&gt;
      &lt;li&gt;Framework for robustness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Higher reuse levels - due to code reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;DbC is a very simple and proven technique which every developer should learn and
try to apply to software being developed in order to guarantee robustness and
reliability&lt;/p&gt;

&lt;p&gt;No framework/library/base class is necessary in order to use DbC. In fact I advise
against that, as any of those components, although saving key strokes, can
introduce a level of indirection to the code, which would otherwise be clearer
with, just the basic language features being used.&lt;/p&gt;

&lt;p&gt;(It is arguable but) DbC in grand part takes care of unit-testing, as it is
constantly ensuring that it is doing things properly. Further more, this is what
unit testing tries to fix, and it does indeed do a good job, but it is not as
powerful because there’s a limit to how much it can “spy” into the System Under
Test to assert if it is indeed working properly.&lt;/p&gt;

&lt;h2 id=&quot;aside&quot;&gt;Aside&lt;/h2&gt;

&lt;p&gt;From the idea of the CQS principle, &lt;a href=&quot;https://twitter.com/gregyoung&quot;&gt;Gregory Young&lt;/a&gt;
and &lt;a href=&quot;http://udidahan.com&quot;&gt;Udi Dahan&lt;/a&gt; derived &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn568103.aspx&quot;&gt;CQRS&lt;/a&gt;,
which is essentially applying CQS at an architectural level.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2017/01/08/writting-reliable-and-robust-code-with-design-by-contract/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2017/01/08/writting-reliable-and-robust-code-with-design-by-contract/</guid>
        
        <category>Design by Contract</category>
        
        <category>Python</category>
        
        <category>Domain-Driven Design</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Simple JavaScript Currying Using bind</title>
        <description>&lt;p&gt;I was working on a nodejs project with mighty &lt;a href=&quot;https://github.com/giannis&quot;&gt;@giannis&lt;/a&gt;
and we had this library that required setting up event handlers, pretty much in
the usual form of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;libObject.on('event', function(param) {
    // handling code using the same libObject.
    // It's very important and compulsory using libObject here.
    return libObject.someMethod();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No issues with that, but a new business requirement lead us to need many
instances of that &lt;code&gt;libObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I thought about it the naive way and created an array with the &lt;code&gt;libObject&lt;/code&gt;s,
then extracted the handler functions into standalone functions I could set in each
of the &lt;code&gt;libObject&lt;/code&gt; pretty much like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var libObjectCollection = {};

var handlerfn = function(param) {

};

for (var key in libObjectCollection) {
    libObjectCollection[key].on('event', handlerfn);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is where the challenge begun, as in the &lt;code&gt;handlerfn&lt;/code&gt; I could no longer
know which &lt;code&gt;libObject&lt;/code&gt; instance I should call.&lt;/p&gt;

&lt;p&gt;That’s when might &lt;a href=&quot;https://github.com/giannis&quot;&gt;@giannis&lt;/a&gt; told me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mate, just use “bind” on the &lt;code&gt;handlerfn&lt;/code&gt;, and pass in the key/id of the instance
you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I already knew that functions are first class objects in JavaScript, and
that they can be passed around, and even have methods called on them. Specifically
I already knew about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;,
but I had never had a case in which &lt;code&gt;bind&lt;/code&gt; was needed.&lt;/p&gt;

&lt;p&gt;So, first stop.. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bind() method creates a new function that, when called, has its this
keyword set to the provided value, with a given sequence of arguments preceding
any provided when the new function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;that meant I could go like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var handlerfn = function(libObject, param) {

};

for (var key in libObjectCollection) {
    libObjectCollection[key].on('event', handlerfn.bind(null, libObjectCollection[key], param));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter into the bind method is the new &lt;code&gt;this&lt;/code&gt; or context under which
the returned function will run when called in the future.&lt;/p&gt;

&lt;p&gt;Following is the key I need for &lt;code&gt;libObject&lt;/code&gt; and last is whichever params the
library will pass into the fn when calling.&lt;/p&gt;

&lt;p&gt;Last but not least, as I pointed above … this was the the naive way… In the
very end, since this was a NodeJS project and we were already using &lt;a href=&quot;http://pm2.keymetrics.io&quot;&gt;PM2&lt;/a&gt;,
we just created n &lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/application-declaration/&quot;&gt;different processes each with it’s own configuration&lt;/a&gt;
and didn’t need to change the code.&lt;/p&gt;

&lt;p&gt;Despite that I’m thankful I found this issue for now I’ve learned this lesson.
BTW, in FP circles developers call this thing we tried to do with &lt;code&gt;bind&lt;/code&gt;
&lt;a href=&quot;https://www.sitepoint.com/currying-in-functional-javascript/&quot;&gt;currying&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/10/12/simple-javascript-currying-using-bind/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/10/12/simple-javascript-currying-using-bind/</guid>
        
        <category>JavaScript</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Improving the Flask cache decorator</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my rumblings developing flask applications I found the &lt;a href=&quot;http://flask.pocoo.org/docs/0.11/patterns/viewdecorators/#caching-decorator&quot;&gt;caching decorator&lt;/a&gt;.
The decorator is a short and well-written piece of code, but I feel like it misses
the few points bellow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It only caches on the server side and doesn&amp;#8217;t leverage the client-side cache -
meaning that clients still have to go and hit the server every single time they
require a resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It doesn&amp;#8217;t respect the &lt;code&gt;no-cache&lt;/code&gt; requirement from the client (although I
understand why one may not want this, as it would mean busting cache every single
time someone asks for it, thus creating the possibility of reducing the caching
effort and benefits to zero)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way I try to improve it is by having a decorator that easily allows me to
define a caching-control policy per view, that involves both the client-side and
server-side, by following the flow-chart bellow, taken from the &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot;&gt;HTTP Caching&lt;/a&gt;
article by Google Guru &lt;a href=&quot;https://www.igvita.com/&quot;&gt;Ilya Grigorik&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/content/2016/08/http-cache-decision-tree.png&quot; alt=&quot;http cache decision tree&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. HTTP cache decision tree&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Linus Torvalds
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import binascii
import datetime
from flask import Response, make_response

def cached(cacheable=False, must_revalidate=True, client_only=True, client_timeout=0, server_timeout=(5 * 60), key='view/%s'):
&quot;&quot;&quot;
See:
- https://jakearchibald.com/2016/caching-best-practices/
- https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching
&quot;&quot;&quot;
def decorator(f):
  @wraps(f)
  def decorated_function(*args, **kwargs):
    cache_key = key % request.full_path # include query string
    cache_policy = ''
    etag = ''
    if not cacheable:
      cache_policy += ', no-store' # tells the browser not to cache at all
    else:
      if must_revalidate: # this looks contradicting if you haven't read the article.
        # no-cache doesn't mean &quot;don't cache&quot;, it means it must check
        # (or &quot;revalidate&quot; as it calls it) with the server before
        # using the cached resource
        cache_policy += ', no-cache'
      else:
        # Also must-revalidate doesn't mean &quot;must revalidate&quot;, it
        # means the local resource can be used if it's younger than
        # the provided max-age, otherwise it must revalidate
        cache_policy += ', must-revalidate'

      if client_only:
        cache_policy += ', private'
      else:
        cache_policy += ', public'

      cache_policy += ', max-age=%d' % (client_timeout)

    headers = {}
    cache_policy = cache_policy.strip(',')
    headers['Cache-Control'] = cache_policy
    now = datetime.datetime.utcnow()

    client_etag = request.headers.get('If-None-Match')

    response = cache.get(cache_key)
    # respect the hard-refresh
    if response is not None and request.headers.get('Cache-Control', '') != 'no-cache':
      headers['X-Cache'] = 'HIT from Server'
      cached_etag = response.headers.get('ETag')
      if client_etag and cached_etag and client_etag == cached_etag:
        headers['X-Cache'] = 'HIT from Client'
        headers['X-Last-Modified'] = response.headers.get('X-LastModified')
        response = make_response('', 304)
    else:
      response = make_response(f(*args, **kwargs))
      if response.status_code == 200 and request.method in ['GET', 'HEAD']:
        headers['X-Cache'] = 'MISS'
        # - Added the headers to the response object instead of the
        # headers dict so they get cached too
        # - If you can find any faster random algorithm go for it.
        response.headers.add('ETag', binascii.hexlify(os.urandom(4)))
        response.headers.add('X-Last-Modified', str(now))
        cache.set(cache_key, response, timeout=server_timeout)

    response.headers.extend(headers)
    return response
  return decorated_function
return decorator&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in your views you can use it like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;@pages.route('/')
@cached(True, must_revalidate=True, client_only=False, client_timeout=120, server_timeout=5*60)
def index():
  &quot;&quot;&quot;Serve client-side application shell.&quot;&quot;&quot;
  return render_template('shell.html', model = get_default_model())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Chrome doesn&amp;#8217;t function correctly, it doesn&amp;#8217;t send the &lt;code&gt;If-None-Match&lt;/code&gt;
header effectively not allowing the client-side cache to be used at all. Maybe
it&amp;#8217;s a problem with dev-tools. So better test with Firefox Developer Edition&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, the way I deal with static content like JavaScript and CSS,
is by using far-future expiration dates and changing the URL by overriding the
&lt;code&gt;url_for&lt;/code&gt; function to include the modified date of the file on disk.
That way, cache busting is already done from the moment I save the file..&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/26/a-better-cache-decorator-for-flask/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/26/a-better-cache-decorator-for-flask/</guid>
        
        <category>Flask</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>dash(hyphen), ndash and mdash</title>
        <description>&lt;p&gt;It is common that developers use some separator on the title tag to separate the
actual page title from the site name, normally using a pipe or mid-dot or even a
dash/hyphen, thus rendering a title like: &lt;code&gt;About - StackOverflow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recently, as I was reading some HTML code, I noticed that the developer choose to
use as separator the HTML entity: &lt;code&gt;&amp;amp;ndash;&lt;/code&gt; like &lt;code&gt;&amp;lt;title&amp;gt;page title &amp;amp;ndash; sitename&amp;lt;/title&amp;gt;&lt;/code&gt;.
Which was curious to me… I mean, why not just use &lt;code&gt;-&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;I ended up googling about it and found &lt;a href=&quot;http://www.punctuationmatters.com/hyphen-dash-n-dash-and-m-dash/&quot;&gt;an article&lt;/a&gt;
which aptly explains that there’s actually 3 kinds of dashes, each meant for a
specific purpose and with a different graphic representation. The article is just
a bit &lt;em&gt;lengthy&lt;/em&gt;, so for short bellow are the differences and suggested usage of
each of the dashes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dash/hyphen - used to indicate breaks within words that wrap at the end of a
line; to connect compound words like “mass-produced”; to connect grouped numbers
like in a phone number (258 84-850-4509)&lt;/li&gt;
  &lt;li&gt;n dash - has the width of a capital N and should be used to join ranges, like
2000–2010 or July–October 2010&lt;/li&gt;
  &lt;li&gt;m dash - has the width of a capital M and is meant to set apart a unique idea
from the main clause in a sentence or to show when dialog has been interrupted:
like “Hunter strode into the room — was he mad?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is one of those small things in language that is commonly missed but is good
know.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/03/dash-hyphen-ndash-and-mdash/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/03/dash-hyphen-ndash-and-mdash/</guid>
        
        <category>NoCode</category>
        
        <category>Writing</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>BEM - block__element--modifier</title>
        <description>&lt;p&gt;Have your browsed through the internet lately and then &lt;em&gt;view-source(d)&lt;/em&gt; on some
pages? Have you noticed that almost all CSS classes resemble this pattern:
&lt;code&gt;some-thing__other-thing---change-looks&lt;/code&gt; — mind the double underscores and
double dashes… Wondering what’s that?&lt;/p&gt;

&lt;p&gt;That my friend, happens to be a newish CSS naming methodology / notation created
by the good people at &lt;a href=&quot;https://www.yandex.ru/&quot;&gt;Yandex&lt;/a&gt; called &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM - Block Element Modifier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core idea is that web pages are composed by blocks, which in turn contain
elements which in their turn can vary depending on some condition. (Blocks can
contain blocks within them BTW).
So, what is done is when assigning classes names to page elements, name them in
the form of &lt;code&gt;block__element---modifier&lt;/code&gt; depending on what an element is on the
page.&lt;/p&gt;

&lt;p&gt;The convention promises to address questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how to improve codebase reuse?&lt;/li&gt;
  &lt;li&gt;how to avoid copy-paste?&lt;/li&gt;
  &lt;li&gt;how to avoid complexity?&lt;/li&gt;
  &lt;li&gt;how to simplify refactoring and how to get self-documented code?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;To put things into perspective let’s see a practical example of how we would use
this for the simple login widget bellow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/2016/08/login-widget.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First the login widget as a whole could be considered a block, so its markup
would look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class='login-widget'&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the text labels and text fields and the button would be considered elements
of the block, and the markup for the username field could look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type='text' class='login-widget__text-field'/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And most likely when trying to submit this form without filling it, to signal to
the user that a required field is not filled, the background color of the text
field could change to red, and that’s when we a modifier would be applied. The
markup for that state with the modifier applied could look like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type='text' class='login-widget__text-field login-widget__text-field--empty'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The adoption of this convention is quite huge, as for instance frameworks like
&lt;a href=&quot;https://getmdl.io/&quot;&gt;Google material lite&lt;/a&gt; use it. That is probably a sign you
should have it on your tool belt or get used to it because you’ll see it a lot
in the future.&lt;/p&gt;

&lt;p&gt;Do you think this can really address the questions above? Let me know by dropping
a comment bellow.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.bem.info/methodology/&quot;&gt;Official BEM site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/08/02/BEM-block-element-modifier/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/08/02/BEM-block-element-modifier/</guid>
        
        <category>CSS</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>MySQL queries fail due to ONLY_FULL_GROUP_BY sql_mode after updating to v5.7.*</title>
        <description>&lt;p&gt;On v5.7.8, MySQL, introduced a new kind of field: the almighty &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/json.html&quot;&gt;JSON field&lt;/a&gt;,
famous for its versatility and glory in the NoSQL world.&lt;/p&gt;

&lt;p&gt;In a quest for staying up-to-date, using, benefiting and profiting from its awesome
features — blog post on we use it coming soon — we had to upgrade our server
from the now old v5.6.10.&lt;/p&gt;

&lt;p&gt;The upgrade process was smooth and nothing of extraordinary popped-up in the logs
— yes, we kept watch for a while just to make sure — so we believed we were
safe … but, we were not …&lt;/p&gt;

&lt;p&gt;A few hours later, errors like the following started filling the log:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Database error Expression #2 of SELECT list is not in GROUP BY clause and contains
non-aggregated column &lt;code&gt;&amp;lt;column-name&amp;gt;&lt;/code&gt; which is not functionally dependent on
columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
for query &lt;code&gt;&amp;lt;select-query-which-old-version-let-pass&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two things to notice here&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All of these queries were running before and MySQL was ok with how they were
  written.&lt;/li&gt;
  &lt;li&gt;The error message mentions incompatibility with a &lt;code&gt;sql_mode=only_full_group_by&lt;/code&gt;.
  So what is this &lt;code&gt;sql_mode&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is what the official documentation has to say about the &lt;code&gt;sql_mode&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The MySQL server can operate in different SQL modes, and can apply these modes
differently for different clients, depending on the value of the sql_mode system
variable. DBAs can set the global SQL mode to match site server operating
requirements, and each application can set its session SQL mode to its own
requirements.&lt;/p&gt;

  &lt;p&gt;Modes affect the SQL syntax MySQL supports and the data validation checks it
performs. This makes it easier to use MySQL in different environments and to
use MySQL together with other database servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That meant to us that somewhere in this new version, MySQL changed it’s &lt;code&gt;sql_mode&lt;/code&gt;,
and that we have to find this place and change things back. Again the official
documentation helped us confirming our suspicious as it states that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In MySQL 5.7.5, the ONLY_FULL_GROUP_BY SQL mode is enabled by default because
GROUP BY processing has become more sophisticated to include detection of
functional dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The temporary solution which we adapted was to set the &lt;code&gt;sql_mode&lt;/code&gt; to an empty
value which then defaults to &lt;code&gt;NO_AUTO_CREATE_USER&lt;/code&gt; which came as default for v5.6.10&amp;gt;.
But, in the end we’ll have to upgrade our queries to be compliant with the new
&lt;code&gt;sql_mode&lt;/code&gt; as definitive fix.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.anujgakhar.com/2015/12/23/mysql-error-caused-by-sql_modeonly_full_group_by/&quot;&gt;MySQL Error caused by sql_mode=only_full_group_by&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-10.html&quot;&gt;Changes in MySQL 5.6.10 (2013-02-05, General Availability)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-changes&quot;&gt;SQL Mode Changes in MySQL 5.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2016/06/21/MySQL-Queries-failing-due-to-sql_mode=only_full_group_by-being-enabled-by-default-on-MySQL-5.7-update/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2016/06/21/MySQL-Queries-failing-due-to-sql_mode=only_full_group_by-being-enabled-by-default-on-MySQL-5.7-update/</guid>
        
        <category>Database</category>
        
        <category>MySQL</category>
        
        <category>SQL</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Interview during the SeedStars World - Maputo 2015 Contest!</title>
        <description>&lt;iframe src=&quot;http://rd.videos.sapo.mz/playhtml?file=http://rd.videos.sapo.mz/j9MqVow8bUIEWdRVDebE/mov/1&amp;amp;relatedVideos=none&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;400&quot; height=&quot;225&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 26 May 2015 00:00:00 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2015/05/26/Interview-at-the-Seed-Stars-World-Maputo-Contest-2015/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2015/05/26/Interview-at-the-Seed-Stars-World-Maputo-Contest-2015/</guid>
        
        <category>Startup</category>
        
        <category>Entrepreneurship</category>
        
        
        <category>Startup</category>
        
      </item>
    
      <item>
        <title>Colocando Proxy no Ubuntu</title>
        <description>&lt;h2 id=&quot;no-sistema-operativo&quot;&gt;No Sistema operativo&lt;/h2&gt;

&lt;p&gt;Para usar proxy em seu Ubuntu edite o ficheiro &lt;code&gt;/etc/environment&lt;/code&gt; adicionado com
a estrutura seguinte:
&lt;code&gt;tipo_de_proxy=&quot;http://usuario@senha@servidor:porta&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para quem usa uma conta de domínio, é sugestivo colocar o domínio como parte da
linha como abaixo:
&lt;code&gt;tipo_de_proxy=&quot;http://dominio/usuario@senha@servidor:porta&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A seguir um exemplo completo do ficheiro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Proxy settings
http_proxy=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
https_proxy=&quot;http://dominio/usuario@s3n#4prx@server:8080&quot;
ftp_proxy=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;
HTTP_PROXY=&quot;http://dominio/usuario@s3n#4@server:8080&quot;
HTTPS_PROXY=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
FTP_PROXY=&quot;http://dominio/usuario@s3n#4@prxserver:8080&quot;
NO_PROXY=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note que para o endereço local nem sempre queremos usar o proxy dai o &lt;code&gt;no_proxy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;no-gestor-de-pacotes-apt&quot;&gt;No gestor de pacotes APT&lt;/h2&gt;

&lt;p&gt;Após colocar o proxy no sistema operativo, notará que os gestor de pacotes APT
não consegue buscar novos pacotes. Isto porque ele usa uma outra configuração
para o proxy.&lt;/p&gt;

&lt;p&gt;A configuração consite em modificar/criar o ficheiro &lt;code&gt;/etc/apt/apt.conf&lt;/code&gt;
adicionando nele uma linha com a estrutura:
&lt;code&gt;Acquire::http::Proxy &quot;http://dominio\usuario:senha@servidor:porta&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NOTE:&lt;/p&gt;

&lt;p&gt;Apesar da estrutura de linha ser muito similar. Existe uma diferença na barra
que separa o &lt;code&gt;dominio&lt;/code&gt; do &lt;code&gt;nome_de_usuario&lt;/code&gt;. Para o proxy de OS a barra deve ser
para direita e para o proxy de APT é para a esquerda.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Aug 2014 17:20:19 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2014/08/23/putting-a-proxy-on-ubuntu/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2014/08/23/putting-a-proxy-on-ubuntu/</guid>
        
        <category>Note</category>
        
        <category>bash</category>
        
        
        <category>Coding</category>
        
      </item>
    
      <item>
        <title>Alargando o HD no VirtualBox</title>
        <description>&lt;p&gt;Para alargar um disco virtual no VirtualBox, usa-se o comando VBoxManage em um
Terminal de comandos.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Primeiro, desliga-se a máquina virtual - assegurar que o estado está definido
  como desligado, não salvo.&lt;/li&gt;
  &lt;li&gt;Em segundo lugar, abre-se o terminal de Comandos e vai-se para pasta de arquivos
  da maquina virtual: &lt;code&gt;cd /mnt/dados/VirtualBox\ VMs/Ruindows/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Executa-se o comando para alargar o HD da VM: &lt;code&gt;vboxmanage modifyhd &quot;&amp;lt;hd name&amp;gt;&quot; --resize&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 16 Aug 2014 12:21:03 +0200</pubDate>
        <link>https://dareenzo.github.io/blog/2014/08/16/enlarging-virtual-boxes-hd-size/</link>
        <guid isPermaLink="true">https://dareenzo.github.io/blog/2014/08/16/enlarging-virtual-boxes-hd-size/</guid>
        
        <category>Note</category>
        
        <category>VirtualBox</category>
        
        
        <category>Coding</category>
        
      </item>
    
  </channel>
</rss>
